%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2006.m40.i030.n018.S.c15.114274987 Greek frame borders. Vector set.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: Max
%%CreationDate: 6/30/2020
%%BoundingBox: 0 0 600 450
%%HiResBoundingBox: 0 0 600 450
%%CropBox: 0 0 600 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.1 x540 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Mobile</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-06-30T12:15:33+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-06-30T12:15:33+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-06-30T12:15:33+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYqxD8z9bvdF8uC/stTbT50nijSOOGC4luDM4iEUaTtGtQX5nfo&#xA;DirzaD8yvN6anHaTa+4uo7myWSwnttNHrRXN2tvIqvbTTkOo5EjqMVRa+c/OZ8vaXqbeavV1PV7j&#xA;6vbaHa2Vi9wC0skaEerJF8P7r7RxVAWn5o+bTfRw/p4zTJcRwzWU1tp45xzW1zKJI5LWWevBrZQ3&#xA;hyGKphc+cfOFtomhXf8Ai765quswQTNpNrZaf6sHrWv1omT1ZYuKKn7TUxVKY/zX83rcMsWu/WZE&#xA;t9W9e0mtrFWSSz0x7uCRWtnnVl9SnemxGKpzrHm7zfp36Nhi82nUr6+t3ubi2tbPTQbVYkjZvXaa&#xA;aIJ/e7V60OKpMv5recTb3jW2u/WJY7ecNFNa2SvDNDc2sQf/AEd5kdWW4anxUNMVTzzF5s82aTqn&#xA;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&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:0cd03c1f-42b7-334f-acdc-7199ffe4e12c</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0cd03c1f-42b7-334f-acdc-7199ffe4e12c</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:54167e95-e6b2-0a41-b2ae-1782bec5c45d</stRef:instanceID>
            <stRef:documentID>xmp.did:54167e95-e6b2-0a41-b2ae-1782bec5c45d</stRef:documentID>
            <stRef:originalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f70c2a48-7e60-1e48-b1b3-10aa1f741cef</stEvt:instanceID>
                  <stEvt:when>2020-06-29T12:40:53+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0cd03c1f-42b7-334f-acdc-7199ffe4e12c</stEvt:instanceID>
                  <stEvt:when>2020-06-30T12:15:33+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Mobile</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>600.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
600 450 li
600 0 li
cp
clp
600 450 mo
0 450 li
0 0 li
600 0 li
600 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
361.089 243.257 mo
358.701 242.492 li
359.533 239.67 360.173 236.764 360.606 233.835 cv
360.79 232.594 li
353.365 231.521 li
353.185 232.756 li
352.704 236.056 351.913 239.317 350.836 242.452 cv
352.019 242.858 li
350.825 242.487 li
350.596 243.224 350.311 243.94 350.008 244.699 cv
349.889 244.998 349.77 245.298 349.653 245.599 cv
349.216 246.735 li
358.414 250.551 li
356.681 254.511 354.475 258.386 351.84 262.099 cv
349.839 260.604 li
351.544 258.208 353.093 255.666 354.454 253.031 cv
355.028 251.919 li
348.361 248.481 li
347.788 249.592 li
346.265 252.547 344.454 255.376 342.408 258.001 cv
342.408 258.001 li
342.016 258.501 li
341.805 258.772 341.594 259.043 341.391 259.288 cv
339.462 261.513 li
346.942 268.123 li
344.087 271.255 340.746 274.204 336.984 276.912 cv
335.579 274.858 li
337.872 273.226 340.16 271.321 342.394 269.186 cv
343.299 268.32 li
338.103 262.907 li
337.201 263.773 li
334.798 266.079 332.17 268.173 329.388 269.995 cv
329.389 269.996 li
328.011 270.881 li
325.463 272.356 li
330.403 281.033 li
326.591 283.122 322.471 284.828 318.123 286.117 cv
317.462 283.712 li
320.309 282.878 323.095 281.822 325.764 280.567 cv
326.889 280.038 li
323.733 273.241 li
322.6 273.768 li
319.583 275.17 316.421 276.295 313.2 277.112 cv
313.2 277.112 li
312.818 277.195 312.438 277.284 312.057 277.375 cv
311.344 277.545 310.67 277.706 309.991 277.808 cv
308.71 278 li
310.554 287.859 li
306.03 288.604 301.582 288.881 297.301 288.688 cv
297.455 286.182 li
300.418 286.293 303.393 286.209 306.311 285.928 cv
307.563 285.807 li
306.797 278.341 li
305.556 278.465 li
302.258 278.797 298.894 278.825 295.556 278.551 cv
295.454 279.797 li
295.517 278.549 li
294.765 278.511 294.018 278.412 293.227 278.309 cv
292.887 278.265 292.548 278.22 292.209 278.181 cv
291 278.039 li
289.577 287.895 li
285.322 287.201 281.022 286.018 276.762 284.365 cv
277.715 282.066 li
280.323 283.094 283.109 283.949 286.192 284.669 cv
287.413 284.953 li
289.099 277.641 li
287.88 277.36 li
284.641 276.613 281.456 275.56 278.415 274.227 cv
278.416 274.226 li
277.281 273.724 276.339 273.289 275.427 272.799 cv
274.307 272.195 li
269.716 281.097 li
265.889 279.042 262.211 276.523 258.756 273.592 cv
260.408 271.722 li
262.669 273.651 265.075 275.409 267.574 276.956 cv
268.632 277.611 li
272.607 271.257 li
271.546 270.594 li
268.729 268.834 266.058 266.799 263.607 264.545 cv
262.946 263.914 li
262.345 263.344 261.777 262.806 261.25 262.226 cv
260.386 261.275 li
253.148 268.222 li
251.563 266.514 250.12 264.699 248.905 263.129 cv
247.657 261.396 246.358 259.539 245.2 257.578 cv
247.382 256.335 li
248.967 258.996 250.673 261.44 252.463 263.613 cv
253.253 264.571 li
259.067 259.845 li
258.277 258.875 li
256.176 256.294 254.306 253.507 252.72 250.589 cv
252.536 250.214 252.344 249.844 252.15 249.474 cv
251.821 248.844 251.51 248.249 251.249 247.636 cv
250.742 246.449 li
241.649 250.671 li
239.814 246.49 238.453 242.243 237.591 238.014 cv
240.056 237.553 li
240.663 240.451 241.475 243.314 242.476 246.081 cv
242.902 247.262 li
249.948 244.679 li
249.52 243.506 li
248.381 240.389 247.53 237.143 246.989 233.855 cv
245.756 234.059 li
246.983 233.823 li
246.857 233.162 246.777 232.492 246.692 231.782 cv
246.641 231.354 246.589 230.928 246.528 230.502 cv
246.357 229.314 li
236.475 230.327 li
236.124 225.914 236.218 221.459 236.755 217.052 cv
239.22 217.409 li
238.875 220.135 238.731 223.044 238.781 226.26 cv
238.801 227.516 li
246.305 227.362 li
246.28 226.113 li
246.214 222.757 246.453 219.404 246.989 216.146 cv
247.043 215.837 li
247.222 214.82 247.391 213.859 247.633 212.908 cv
247.949 211.668 li
238.179 209.417 li
238.745 207.13 239.474 204.937 240.123 203.073 cv
240.852 201.184 241.72 199.024 242.753 196.936 cv
244.984 198.087 li
243.594 200.916 242.503 203.62 241.661 206.321 cv
241.292 207.506 li
248.427 209.789 li
248.808 208.597 li
249.823 205.416 251.137 202.331 252.712 199.425 cv
252.915 199.082 253.112 198.736 253.308 198.389 cv
253.667 197.751 254.008 197.149 254.389 196.573 cv
255.095 195.503 li
246.603 190.191 li
249.088 186.395 251.898 182.936 254.978 179.883 cv
256.713 181.691 li
254.624 183.78 252.671 186.026 250.899 188.381 cv
250.144 189.384 li
256.156 193.874 li
256.904 192.874 li
258.897 190.209 261.148 187.718 263.596 185.466 cv
263.596 185.466 li
264.483 184.662 265.312 183.945 266.128 183.275 cv
267.091 182.485 li
260.797 174.745 li
264.46 171.906 268.238 169.541 272.058 167.693 cv
273.115 169.969 li
270.462 171.271 267.889 172.768 265.451 174.426 cv
264.415 175.132 li
268.653 181.323 li
269.684 180.618 li
272.435 178.738 275.371 177.108 278.412 175.775 cv
277.91 174.63 li
278.445 175.76 li
279.05 175.473 279.678 175.231 280.343 174.975 cv
280.745 174.82 281.147 174.665 281.545 174.5 cv
282.651 174.04 li
279.233 164.716 li
283.43 163.288 287.776 162.286 292.186 161.73 cv
292.44 164.218 li
289.518 164.59 286.598 165.17 283.743 165.948 cv
282.535 166.277 li
284.522 173.511 li
285.727 173.181 li
288.921 172.305 292.229 171.722 295.556 171.449 cv
295.556 171.449 li
297.186 171.322 li
300.137 171.25 li
299.934 161.261 li
301.854 161.251 303.971 161.357 306.553 161.584 cv
308.542 161.82 310.835 162.125 313.146 162.618 cv
312.583 165.064 li
309.474 164.413 306.584 164.024 303.783 163.877 cv
302.546 163.813 li
302.088 171.29 li
303.338 171.364 li
306.721 171.566 310.037 172.078 313.195 172.887 cv
313.318 172.92 li
314.338 173.197 315.392 173.482 316.399 173.807 cv
317.591 174.19 li
320.635 164.682 li
324.999 166.193 329.045 168.067 332.693 170.27 cv
331.363 172.396 li
328.825 170.886 326.167 169.546 323.445 168.407 cv
322.288 167.923 li
319.415 174.854 li
320.568 175.333 li
323.636 176.608 326.604 178.18 329.388 180.005 cv
330.073 178.959 li
329.422 180.026 li
329.993 180.375 330.54 180.77 331.118 181.188 cv
331.466 181.44 331.814 181.693 332.17 181.935 cv
333.159 182.612 li
339.102 174.656 li
342.668 177.456 345.884 180.542 348.684 183.853 cv
346.74 185.433 li
344.826 183.184 342.744 181.058 340.536 179.101 cv
339.6 178.27 li
334.631 183.891 li
335.567 184.719 li
338.062 186.924 340.363 189.374 342.408 191.999 cv
343.395 191.23 li
342.431 192.026 li
342.917 192.616 343.358 193.241 343.826 193.903 cv
344.017 194.173 344.208 194.444 344.401 194.712 cv
345.115 195.698 li
353.33 190.075 li
355.719 193.718 357.763 197.682 359.421 201.886 cv
357.075 202.746 li
355.995 200.006 354.711 197.32 353.249 194.746 cv
352.631 193.657 li
346.111 197.369 li
346.73 198.455 li
348.375 201.346 349.757 204.404 350.834 207.543 cv
351.357 209.097 li
352.159 211.931 li
361.787 209.285 li
362.861 213.458 363.496 217.871 363.68 222.435 cv
361.186 222.485 li
361.075 219.501 360.74 216.541 360.187 213.667 cv
359.951 212.446 li
352.585 213.824 li
352.815 215.053 li
353.424 218.298 353.738 221.643 353.75 224.996 cv
353.733 225.416 353.725 225.835 353.717 226.257 cv
353.703 226.943 353.691 227.631 353.638 228.314 cv
353.538 229.582 li
363.524 230.193 li
363.145 234.742 362.328 239.125 361.089 243.257 cv
cp
366.193 227.853 mo
356.194 227.24 li
356.204 226.929 356.21 226.616 356.216 226.304 cv
356.225 225.886 356.232 225.468 356.249 225.05 cv
355 225 li
356.25 224.996 li
356.24 221.912 355.984 218.832 355.489 215.824 cv
357.953 215.363 li
358.417 218.114 358.675 220.94 358.719 223.78 cv
358.738 225.036 li
366.245 224.883 li
366.218 223.631 li
366.094 217.97 365.304 212.512 363.87 207.409 cv
363.534 206.212 li
353.889 208.863 li
353.204 206.744 li
352.019 207.142 li
353.201 206.736 li
352.207 203.841 350.967 201.013 349.509 198.312 cv
351.682 197.075 li
353.027 199.563 354.201 202.149 355.177 204.779 cv
355.609 205.946 li
362.654 203.364 li
362.214 202.186 li
360.258 196.947 357.729 192.048 354.697 187.624 cv
353.991 186.593 li
345.722 192.253 li
345.301 191.658 344.862 191.049 344.381 190.463 cv
344.381 190.462 li
344.375 190.455 344.368 190.447 344.362 190.439 cv
344.36 190.438 344.359 190.436 344.358 190.435 cv
344.358 190.435 li
342.479 188.027 340.396 185.76 338.15 183.685 cv
339.806 181.812 li
341.877 183.726 343.823 185.794 345.604 187.973 cv
346.393 188.938 li
352.208 184.21 li
351.422 183.24 li
348.063 179.097 344.09 175.28 339.613 171.894 cv
338.61 171.136 li
332.604 179.178 li
332.597 179.173 332.59 179.168 332.583 179.163 cv
332.002 178.742 331.4 178.309 330.759 177.915 cv
330.759 177.914 li
330.748 177.907 330.738 177.901 330.728 177.895 cv
330.727 177.894 330.726 177.893 330.725 177.893 cv
330.725 177.893 li
328.168 176.221 325.466 174.751 322.676 173.517 cv
323.632 171.21 li
326.21 172.352 328.72 173.681 331.106 175.167 cv
332.166 175.827 li
336.138 169.478 li
335.089 168.812 li
330.672 166.01 325.669 163.686 320.22 161.905 cv
319.024 161.514 li
315.968 171.062 li
315.298 170.867 314.628 170.685 313.973 170.507 cv
313.835 170.47 li
313.508 171.676 li
313.818 170.465 li
310.895 169.717 307.846 169.21 304.735 168.957 cv
304.889 166.455 li
307.529 166.662 310.276 167.094 313.247 167.768 cv
314.462 168.044 li
316.142 160.754 li
314.941 160.462 li
312.102 159.772 309.256 159.387 306.81 159.098 cv
303.528 158.809 301.004 158.714 298.622 158.783 cv
297.384 158.82 li
297.587 168.813 li
295.358 168.957 li
295.454 170.203 li
295.351 168.958 li
292.288 169.209 289.24 169.711 286.274 170.453 cv
285.612 168.043 li
288.355 167.356 291.152 166.857 293.942 166.56 cv
295.18 166.428 li
294.416 158.967 li
293.167 159.1 li
287.714 159.681 282.341 160.919 277.198 162.781 cv
276.018 163.208 li
279.472 172.631 li
279.463 172.635 279.453 172.639 279.444 172.642 cv
278.776 172.899 278.087 173.166 277.408 173.486 cv
277.408 173.485 li
274.605 174.714 271.887 176.184 269.313 177.86 cv
267.901 175.799 li
270.264 174.263 272.746 172.886 275.297 171.696 cv
276.428 171.169 li
273.274 164.376 li
272.145 164.891 li
267.409 167.05 262.732 169.972 258.245 173.574 cv
257.264 174.361 li
263.589 182.141 li
263.046 182.604 262.493 183.091 261.916 183.614 cv
262.756 184.54 li
261.91 183.62 li
259.653 185.695 257.556 187.967 255.662 190.384 cv
253.661 188.89 li
255.402 186.674 257.308 184.569 259.337 182.619 cv
260.238 181.753 li
255.049 176.347 li
254.147 177.204 li
250.279 180.881 246.801 185.157 243.81 189.915 cv
243.143 190.976 li
251.63 196.285 li
251.459 196.579 251.293 196.871 251.131 197.16 cv
250.937 197.503 250.743 197.846 250.542 198.185 cv
251.617 198.823 li
250.519 198.227 li
249.063 200.908 247.822 203.736 246.82 206.65 cv
244.432 205.886 li
245.292 203.357 246.389 200.803 247.769 198.114 cv
248.338 197.004 li
241.689 193.574 li
241.109 194.664 li
239.762 197.195 238.676 199.88 237.776 202.212 cv
236.976 204.509 236.074 207.242 235.456 210.088 cv
235.193 211.295 li
244.927 213.538 li
244.799 214.166 244.689 214.792 244.581 215.404 cv
244.525 215.724 li
245.756 215.941 li
244.522 215.738 li
244.028 218.742 243.775 221.823 243.77 224.913 cv
241.271 224.964 li
241.274 221.9 241.47 219.133 241.865 216.538 cv
242.055 215.292 li
234.618 214.218 li
234.443 215.459 li
233.678 220.884 233.562 226.389 234.099 231.823 cv
234.222 233.071 li
244.206 232.049 li
244.207 232.059 244.208 232.068 244.209 232.079 cv
244.295 232.79 244.384 233.525 244.523 234.262 cv
244.522 234.262 li
244.524 234.271 244.526 234.279 244.527 234.289 cv
244.528 234.29 244.528 234.292 244.528 234.294 cv
244.528 234.294 li
245.026 237.312 245.774 240.297 246.756 243.186 cv
244.412 244.046 li
243.512 241.383 242.792 238.637 242.27 235.865 cv
242.038 234.639 li
234.675 236.016 li
234.896 237.238 li
235.842 242.464 237.523 247.72 239.893 252.86 cv
240.418 253.998 li
249.497 249.783 li
249.642 250.071 249.789 250.354 249.935 250.632 cv
250.124 250.995 250.314 251.358 250.494 251.727 cv
251.617 251.178 li
250.519 251.774 li
251.981 254.466 253.674 257.051 255.56 259.475 cv
253.616 261.055 li
251.961 258.94 250.386 256.578 248.924 254.017 cv
248.305 252.933 li
241.803 256.636 li
242.398 257.715 li
243.763 260.188 245.357 262.481 246.902 264.624 cv
248.401 266.563 250.205 268.821 252.22 270.868 cv
253.085 271.748 li
260.292 264.831 li
260.604 265.138 260.918 265.436 261.227 265.729 cv
261.887 266.358 li
262.756 265.46 li
261.91 266.38 li
264.168 268.458 266.605 270.358 269.168 272.04 cv
267.84 274.164 li
265.491 272.634 263.236 270.911 261.125 269.03 cv
260.188 268.195 li
255.217 273.821 li
256.156 274.648 li
260.367 278.358 264.918 281.472 269.683 283.9 cv
270.792 284.466 li
275.375 275.579 li
276.006 275.886 276.667 276.187 277.404 276.513 cv
277.91 275.369 li
277.408 276.514 li
280.211 277.743 283.13 278.747 286.104 279.502 cv
285.542 281.938 li
282.626 281.203 279.993 280.332 277.523 279.288 cv
276.364 278.798 li
273.485 285.739 li
274.649 286.215 li
279.892 288.356 285.212 289.817 290.46 290.557 cv
291.693 290.73 li
293.125 280.816 li
293.848 280.911 294.592 281.002 295.352 281.042 cv
295.352 281.043 li
298.423 281.294 301.516 281.301 304.563 281.063 cv
304.817 283.548 li
302.02 283.76 299.178 283.786 296.354 283.626 cv
295.11 283.555 li
294.653 291.027 li
295.893 291.111 li
297.238 291.202 298.598 291.247 299.973 291.247 cv
303.968 291.247 308.078 290.865 312.24 290.104 cv
313.475 289.878 li
311.635 280.04 li
311.974 279.965 312.308 279.886 312.637 279.807 cv
313.013 279.717 313.39 279.627 313.768 279.547 cv
313.508 278.324 li
313.815 279.536 li
316.783 278.782 319.703 277.779 322.513 276.549 cv
323.567 278.821 li
320.998 279.959 318.324 280.904 315.603 281.639 cv
314.39 281.966 li
316.379 289.205 li
317.586 288.872 li
323 287.376 328.097 285.262 332.735 282.59 cv
333.813 281.969 li
328.862 273.275 li
330.748 272.093 li
330.073 271.041 li
330.759 272.087 li
333.32 270.407 335.759 268.509 338.021 266.433 cv
339.752 268.236 li
337.575 270.24 335.357 272.009 333.146 273.505 cv
332.104 274.209 li
336.35 280.41 li
337.383 279.692 li
342.111 276.408 346.239 272.757 349.653 268.839 cv
350.469 267.903 li
342.973 261.278 li
343.296 260.906 li
343.532 260.622 343.76 260.33 343.987 260.038 cv
344.372 259.549 li
343.395 258.77 li
344.381 259.538 li
346.265 257.12 347.959 254.536 349.425 251.843 cv
351.647 252.988 li
350.295 255.479 348.769 257.874 347.099 260.122 cv
346.355 261.123 li
352.368 265.613 li
353.114 264.601 li
356.46 260.062 359.185 255.269 361.213 250.355 cv
361.689 249.202 li
352.435 245.364 li
352.703 244.687 352.974 243.988 353.2 243.265 cv
353.201 243.265 li
354.193 240.375 354.954 237.382 355.465 234.351 cv
357.938 234.707 li
357.465 237.498 356.8 240.258 355.954 242.93 cv
355.578 244.117 li
362.713 246.401 li
363.097 245.216 li
364.729 240.17 365.743 234.75 366.111 229.104 cv
366.193 227.853 li
cp
.231373 .231373 .231373 rgb
f
365.024 247.32 mo
363.784 250.924 362.251 254.428 360.472 257.729 cv
358.657 261.048 356.561 264.242 354.239 267.224 cv
355.226 267.991 li
354.237 267.227 li
349.642 273.165 344.045 278.319 337.604 282.546 cv
338.289 283.591 li
337.599 282.549 li
331.42 286.641 324.445 289.705 316.868 291.656 cv
316.868 291.657 li
313.367 292.548 309.598 293.169 305.652 293.503 cv
303.904 293.668 302.101 293.706 300.357 293.742 cv
300.027 293.75 li
299.644 293.742 li
297.9 293.706 296.096 293.668 294.348 293.503 cv
294.23 294.747 li
294.335 293.502 li
290.402 293.169 286.631 292.549 283.13 291.656 cv
279.456 290.715 275.838 289.471 272.378 287.958 cv
271.877 289.104 li
272.374 287.957 li
265.585 285.014 259.214 280.846 253.437 275.57 cv
253.437 275.57 li
247.912 270.491 243.233 264.49 239.531 257.733 cv
235.855 250.879 233.386 243.671 232.191 236.31 cv
230.958 236.51 li
232.191 236.309 li
231.587 232.612 231.271 228.805 231.25 225.007 cv
231.271 221.195 231.587 217.388 232.191 213.692 cv
230.958 213.49 li
232.191 213.69 li
233.386 206.329 235.855 199.12 239.531 192.267 cv
243.234 185.509 247.913 179.507 253.44 174.427 cv
253.44 174.427 li
259.217 169.152 265.587 164.986 272.374 162.044 cv
271.877 160.897 li
272.378 162.042 li
275.839 160.528 279.456 159.284 283.129 158.344 cv
286.636 157.45 290.406 156.83 294.335 156.499 cv
294.23 155.253 li
294.349 156.498 li
296.092 156.332 297.891 156.294 299.631 156.258 cv
299.973 156.25 li
300.37 156.258 li
302.109 156.294 303.908 156.332 305.665 156.499 cv
309.594 156.83 313.364 157.451 316.871 158.344 cv
316.871 158.344 li
324.447 160.296 331.422 163.36 337.599 167.451 cv
338.289 166.409 li
337.604 167.454 li
344.044 171.68 349.641 176.834 354.237 182.774 cv
355.226 182.009 li
354.239 182.777 li
356.561 185.759 358.657 188.954 360.468 192.265 cv
362.251 195.572 363.784 199.076 365.024 202.679 cv
366.206 202.272 li
365.026 202.684 li
367.451 209.632 368.704 217.14 368.75 225 cv
368.704 232.86 367.451 240.368 365.026 247.315 cv
366.206 247.728 li
365.024 247.32 li
cp
370 225 mo
371.25 224.993 li
371.203 216.856 369.904 209.075 367.388 201.865 cv
367.388 201.865 li
367.387 201.864 367.387 201.862 367.386 201.86 cv
367.386 201.86 li
367.386 201.86 li
366.102 198.13 364.515 194.503 362.665 191.072 cv
360.787 187.637 358.616 184.329 356.212 181.241 cv
356.212 181.241 li
351.447 175.085 345.649 169.744 338.979 165.368 cv
338.979 165.367 li
332.568 161.122 325.339 157.944 317.491 155.922 cv
317.18 157.132 li
317.488 155.921 li
313.849 154.994 309.94 154.35 305.888 154.009 cv
304.053 153.834 302.207 153.796 300.422 153.759 cv
299.973 153.75 li
299.579 153.759 li
297.798 153.796 295.957 153.834 294.125 154.008 cv
294.125 154.008 li
294.125 154.008 294.123 154.008 294.122 154.008 cv
294.119 154.008 294.116 154.008 294.112 154.009 cv
294.112 154.009 li
290.051 154.352 286.148 154.995 282.51 155.921 cv
278.708 156.895 274.963 158.183 271.38 159.75 cv
271.38 159.75 li
264.337 162.803 257.733 167.121 251.751 172.583 cv
252.594 173.506 li
251.749 172.586 li
246.019 177.853 241.169 184.072 237.335 191.071 cv
238.431 191.672 li
237.33 191.081 li
233.522 198.18 230.963 205.652 229.724 213.289 cv
229.724 213.289 li
229.099 217.113 228.771 221.051 228.75 225.007 cv
228.771 228.948 229.099 232.887 229.724 236.711 cv
229.724 236.711 li
230.963 244.348 233.522 251.818 237.33 258.919 cv
238.431 258.328 li
237.335 258.929 li
241.169 265.929 246.019 272.147 251.749 277.413 cv
252.594 276.493 li
251.751 277.416 li
257.732 282.878 264.334 287.195 271.376 290.248 cv
271.376 290.249 li
274.959 291.815 278.705 293.104 282.512 294.078 cv
286.143 295.004 290.046 295.646 294.113 295.991 cv
294.113 295.991 li
294.116 295.991 294.119 295.991 294.121 295.992 cv
294.123 295.992 294.124 295.992 294.125 295.992 cv
294.125 295.992 li
295.961 296.165 297.807 296.204 299.591 296.241 cv
300.027 296.25 li
300.409 296.241 li
302.198 296.204 304.048 296.165 305.875 295.992 cv
309.946 295.648 313.854 295.005 317.488 294.078 cv
317.18 292.867 li
317.491 294.078 li
325.339 292.057 332.568 288.879 338.979 284.633 cv
338.979 284.633 li
345.65 280.256 351.447 274.915 356.212 268.759 cv
356.212 268.759 li
358.615 265.672 360.786 262.364 362.669 258.921 cv
364.516 255.494 366.104 251.865 367.388 248.135 cv
367.388 248.135 li
369.904 240.926 371.203 233.145 371.25 225.007 cv
370 225 li
cp
f
346.107 240.828 mo
345.229 243.381 344.145 245.861 342.892 248.192 cv
341.599 250.549 340.109 252.814 338.464 254.929 cv
339.45 255.696 li
338.461 254.933 li
335.22 259.134 331.246 262.794 326.648 265.813 cv
327.335 266.857 li
326.643 265.816 li
322.324 268.688 317.388 270.857 311.97 272.266 cv
311.97 272.266 li
309.531 272.888 306.861 273.326 304.014 273.569 cv
302.967 273.675 301.921 273.7 300.813 273.729 cv
300.037 273.751 li
299.187 273.729 li
298.08 273.7 297.033 273.675 295.986 273.569 cv
295.861 274.813 li
295.958 273.567 li
290.629 273.151 285.402 271.832 280.423 269.647 cv
279.92 270.792 li
280.416 269.645 li
275.656 267.592 271.139 264.637 266.988 260.86 cv
263.086 257.276 259.764 253.018 257.115 248.204 cv
254.503 243.309 252.756 238.208 251.922 233.042 cv
250.688 233.241 li
251.922 233.041 li
251.497 230.417 251.271 227.709 251.25 225.009 cv
251.271 222.291 251.497 219.583 251.922 216.959 cv
250.688 216.759 li
251.922 216.958 li
252.756 211.794 254.502 206.693 257.113 201.799 cv
259.762 196.985 263.083 192.727 266.985 189.143 cv
266.985 189.143 li
271.135 185.366 275.654 182.41 280.416 180.356 cv
279.92 179.208 li
280.423 180.353 li
285.401 178.167 290.628 176.849 295.958 176.433 cv
295.861 175.187 li
295.986 176.43 li
297.033 176.325 298.08 176.299 299.187 176.272 cv
299.963 176.25 li
300.813 176.272 li
301.921 176.299 302.967 176.325 304.032 176.432 cv
306.902 176.677 309.5 177.103 311.97 177.734 cv
311.97 177.734 li
317.387 179.142 322.324 181.313 326.643 184.184 cv
327.335 183.143 li
326.648 184.188 li
331.247 187.207 335.221 190.868 338.46 195.068 cv
339.45 194.304 li
338.464 195.072 li
340.109 197.186 341.6 199.452 342.887 201.798 cv
344.145 204.139 345.229 206.619 346.107 209.171 cv
347.289 208.765 li
346.109 209.179 li
347.813 214.031 348.701 219.354 348.75 225 cv
348.701 230.646 347.813 235.969 346.109 240.821 cv
347.289 241.235 li
346.107 240.828 li
cp
348.469 208.351 mo
348.468 208.351 li
347.546 205.674 346.409 203.07 345.083 200.605 cv
343.729 198.135 342.166 195.758 340.44 193.541 cv
340.44 193.541 li
337.031 189.122 332.854 185.273 328.027 182.102 cv
328.027 182.102 li
328.026 182.101 328.025 182.101 328.025 182.1 cv
328.023 182.1 328.022 182.099 328.021 182.098 cv
328.021 182.098 li
323.472 179.074 318.283 176.792 312.599 175.314 cv
312.284 176.524 li
312.594 175.313 li
310.023 174.656 307.214 174.194 304.264 173.943 cv
303.123 173.829 301.98 173.8 300.875 173.772 cv
299.963 173.75 li
299.125 173.772 li
298.029 173.8 296.895 173.829 295.764 173.941 cv
295.764 173.94 li
295.758 173.941 295.752 173.942 295.746 173.942 cv
295.743 173.942 295.74 173.942 295.737 173.943 cv
295.737 173.943 li
290.138 174.383 284.65 175.768 279.425 178.061 cv
279.425 178.061 li
274.41 180.224 269.658 183.331 265.302 187.293 cv
266.144 188.218 li
265.298 187.297 li
261.191 191.069 257.699 195.546 254.917 200.604 cv
256.013 201.206 li
254.91 200.618 li
252.167 205.757 250.332 211.12 249.455 216.559 cv
249.455 216.559 li
249.009 219.308 248.771 222.145 248.75 225.009 cv
248.771 227.854 249.009 230.691 249.455 233.441 cv
249.455 233.441 li
250.332 238.88 252.167 244.243 254.91 249.383 cv
256.013 248.794 li
254.917 249.396 li
257.699 254.454 261.191 258.931 265.298 262.703 cv
266.144 261.782 li
265.302 262.707 li
269.657 266.668 274.406 269.773 279.418 271.937 cv
279.418 271.937 li
284.646 274.23 290.136 275.617 295.737 276.057 cv
295.737 276.058 li
295.745 276.059 295.753 276.059 295.762 276.06 cv
295.763 276.06 295.763 276.06 295.764 276.06 cv
295.764 276.06 li
296.895 276.172 298.029 276.2 299.125 276.228 cv
300.037 276.249 li
300.875 276.228 li
301.98 276.2 303.123 276.172 304.245 276.059 cv
307.212 275.806 310.021 275.344 312.594 274.687 cv
312.284 273.476 li
312.599 274.686 li
318.283 273.208 323.472 270.926 328.021 267.902 cv
328.021 267.902 li
328.022 267.901 328.023 267.9 328.025 267.899 cv
328.025 267.899 328.026 267.898 328.027 267.898 cv
328.027 267.898 li
332.853 264.729 337.028 260.881 340.437 256.464 cv
340.437 256.464 li
340.438 256.463 340.438 256.461 340.439 256.46 cv
340.439 256.46 li
340.439 256.46 li
342.165 254.243 343.728 251.866 345.088 249.386 cv
346.409 246.929 347.546 244.325 348.469 241.649 cv
348.469 241.649 li
350.264 236.534 351.2 230.937 351.25 225.011 cv
350 225 li
351.25 224.989 li
351.2 219.064 350.264 213.466 348.469 208.351 cv
cp
f
135.667 267.5 mo
135.667 276.5 li
148.333 276.5 li
148.333 279.5 li
134 279.5 li
119.667 279.5 li
119.667 276.5 li
132.333 276.5 li
132.333 267.5 li
97.6665 267.5 li
97.6665 276.5 li
110.333 276.5 li
110.333 279.5 li
96 279.5 li
81.6665 279.5 li
81.6665 276.5 li
94.3335 276.5 li
94.3335 267.5 li
59.6665 267.5 li
59.6665 276.5 li
72.3335 276.5 li
72.3335 279.5 li
58 279.5 li
44.5 279.5 li
44.5 276.5 li
56.5 276.5 li
56.5 267.5 li
47.5 267.5 li
47.5 258.5 li
38.5 258.5 li
38.5 270.5 li
35.5 270.5 li
35.5 257 li
35.5 245.167 li
38.5 245.167 li
38.5 255.833 li
47.5 255.833 li
47.5 226.167 li
38.5 226.167 li
38.5 236.833 li
35.5 236.833 li
35.5 225 li
35.5 213.167 li
38.5 213.167 li
38.5 223.833 li
47.5 223.833 li
47.5 194.167 li
38.5 194.167 li
38.5 204.833 li
35.5 204.833 li
35.5 193 li
35.5 179.5 li
38.5 179.5 li
38.5 191.5 li
47.5 191.5 li
47.5 182.5 li
56.5 182.5 li
56.5 173.5 li
44.5 173.5 li
44.5 170.5 li
58 170.5 li
72.3335 170.5 li
72.3335 173.5 li
59.6665 173.5 li
59.6665 182.5 li
94.3335 182.5 li
94.3335 173.5 li
81.6665 173.5 li
81.6665 170.5 li
96 170.5 li
110.333 170.5 li
110.333 173.5 li
97.6665 173.5 li
97.6665 182.5 li
132.333 182.5 li
132.333 173.5 li
119.667 173.5 li
119.667 170.5 li
134 170.5 li
148.333 170.5 li
148.333 173.5 li
135.667 173.5 li
135.667 182.5 li
170.333 182.5 li
170.333 173.5 li
157.667 173.5 li
157.667 170.5 li
172 170.5 li
185.5 170.5 li
185.5 173.5 li
173.5 173.5 li
173.5 182.5 li
182.5 182.5 li
182.5 191.5 li
191.5 191.5 li
191.5 179.5 li
194.5 179.5 li
194.5 193 li
194.5 204.833 li
191.5 204.833 li
191.5 194.167 li
182.5 194.167 li
182.5 223.833 li
191.5 223.833 li
191.5 213.167 li
194.5 213.167 li
194.5 225 li
194.5 236.833 li
191.5 236.833 li
191.5 226.167 li
182.5 226.167 li
182.5 255.833 li
191.5 255.833 li
191.5 245.167 li
194.5 245.167 li
194.5 257 li
194.5 270.5 li
191.5 270.5 li
191.5 258.5 li
182.5 258.5 li
182.5 267.5 li
173.5 267.5 li
173.5 276.5 li
185.5 276.5 li
185.5 279.5 li
172 279.5 li
157.667 279.5 li
157.667 276.5 li
170.333 276.5 li
170.333 267.5 li
135.667 267.5 li
cp
154.667 273.5 mo
154.667 282.5 li
172 282.5 li
188.5 282.5 li
188.5 276.5 li
188.5 273.5 li
176.5 273.5 li
176.5 270.5 li
185.5 270.5 li
185.5 261.5 li
188.5 261.5 li
188.5 273.5 li
191.5 273.5 li
197.5 273.5 li
197.5 257 li
197.5 242.167 li
188.5 242.167 li
188.5 252.833 li
185.5 252.833 li
185.5 229.167 li
188.5 229.167 li
188.5 239.833 li
197.5 239.833 li
197.5 225 li
197.5 210.167 li
188.5 210.167 li
188.5 220.833 li
185.5 220.833 li
185.5 197.167 li
188.5 197.167 li
188.5 207.833 li
197.5 207.833 li
197.5 193 li
197.5 176.5 li
191.5 176.5 li
188.5 176.5 li
188.5 188.5 li
185.5 188.5 li
185.5 179.5 li
176.5 179.5 li
176.5 176.5 li
188.5 176.5 li
188.5 173.5 li
188.5 167.5 li
172 167.5 li
154.667 167.5 li
154.667 176.5 li
167.333 176.5 li
167.333 179.5 li
138.667 179.5 li
138.667 176.5 li
151.333 176.5 li
151.333 167.5 li
134 167.5 li
116.667 167.5 li
116.667 176.5 li
129.333 176.5 li
129.333 179.5 li
100.667 179.5 li
100.667 176.5 li
113.333 176.5 li
113.333 167.5 li
96 167.5 li
78.6665 167.5 li
78.6665 176.5 li
91.3335 176.5 li
91.3335 179.5 li
62.6665 179.5 li
62.6665 176.5 li
75.3335 176.5 li
75.3335 167.5 li
58 167.5 li
41.5 167.5 li
41.5 173.5 li
41.5 176.5 li
53.5 176.5 li
53.5 179.5 li
44.5 179.5 li
44.5 188.5 li
41.5 188.5 li
41.5 176.5 li
38.5 176.5 li
32.5 176.5 li
32.5 193 li
32.5 207.833 li
41.5 207.833 li
41.5 197.167 li
44.5 197.167 li
44.5 220.833 li
41.5 220.833 li
41.5 210.167 li
32.5 210.167 li
32.5 225 li
32.5 239.833 li
41.5 239.833 li
41.5 229.167 li
44.5 229.167 li
44.5 252.833 li
41.5 252.833 li
41.5 242.167 li
32.5 242.167 li
32.5 257 li
32.5 273.5 li
38.5 273.5 li
41.5 273.5 li
41.5 261.5 li
44.5 261.5 li
44.5 270.5 li
53.5 270.5 li
53.5 273.5 li
41.5 273.5 li
41.5 276.5 li
41.5 282.5 li
58 282.5 li
75.3335 282.5 li
75.3335 273.5 li
62.6665 273.5 li
62.6665 270.5 li
91.3335 270.5 li
91.3335 273.5 li
78.6665 273.5 li
78.6665 282.5 li
96 282.5 li
113.333 282.5 li
113.333 273.5 li
100.667 273.5 li
100.667 270.5 li
129.333 270.5 li
129.333 273.5 li
116.667 273.5 li
116.667 282.5 li
134 282.5 li
151.333 282.5 li
151.333 273.5 li
138.667 273.5 li
138.667 270.5 li
167.333 270.5 li
167.333 273.5 li
154.667 273.5 li
cp
f
38.5 173.5 mo
38.5 170.5 li
38.5 167.5 li
32.5 167.5 li
32.5 173.5 li
35.5 173.5 li
38.5 173.5 li
cp
f
191.5 167.5 mo
191.5 170.5 li
191.5 173.5 li
194.5 173.5 li
197.5 173.5 li
197.5 167.5 li
191.5 167.5 li
cp
f
197.5 276.5 mo
194.5 276.5 li
191.5 276.5 li
191.5 279.5 li
191.5 282.5 li
197.5 282.5 li
197.5 276.5 li
cp
f
32.5 276.5 mo
32.5 282.5 li
38.5 282.5 li
38.5 279.5 li
38.5 276.5 li
35.5 276.5 li
32.5 276.5 li
cp
f
497.5 281.25 mo
472.5 281.25 li
447.5 281.25 li
422.5 281.25 li
403.75 281.25 li
403.75 262.5 li
403.75 237.5 li
403.75 212.5 li
403.75 187.5 li
403.75 168.75 li
422.5 168.75 li
447.5 168.75 li
472.5 168.75 li
497.5 168.75 li
522.5 168.75 li
547.5 168.75 li
566.25 168.75 li
566.25 187.5 li
566.25 212.5 li
566.25 237.5 li
566.25 262.5 li
566.25 281.25 li
547.5 281.25 li
522.5 281.25 li
497.5 281.25 li
cp
547.5 283.75 mo
558.75 283.75 li
561.25 283.75 li
568.75 283.75 li
568.75 276.25 li
568.75 273.75 li
568.75 262.5 li
568.75 237.5 li
568.75 212.5 li
568.75 187.5 li
568.75 176.25 li
568.75 173.75 li
568.75 166.25 li
561.25 166.25 li
558.75 166.25 li
547.5 166.25 li
522.5 166.25 li
497.5 166.25 li
472.5 166.25 li
447.5 166.25 li
422.5 166.25 li
411.25 166.25 li
408.75 166.25 li
401.25 166.25 li
401.25 173.75 li
401.25 176.25 li
401.25 187.5 li
401.25 212.5 li
401.25 237.5 li
401.25 262.5 li
401.25 273.75 li
401.25 276.25 li
401.25 283.75 li
408.75 283.75 li
411.25 283.75 li
422.5 283.75 li
447.5 283.75 li
472.5 283.75 li
497.5 283.75 li
522.5 283.75 li
547.5 283.75 li
cp
f
497.5 266.25 mo
472.5 266.25 li
447.5 266.25 li
422.5 266.25 li
418.75 266.25 li
418.75 262.5 li
418.75 237.5 li
418.75 212.5 li
418.75 187.5 li
418.75 183.75 li
422.5 183.75 li
447.5 183.75 li
472.5 183.75 li
497.5 183.75 li
522.5 183.75 li
547.5 183.75 li
551.25 183.75 li
551.25 187.5 li
551.25 212.5 li
551.25 237.5 li
551.25 262.5 li
551.25 266.25 li
547.5 266.25 li
522.5 266.25 li
497.5 266.25 li
cp
536.25 278.75 mo
546.25 278.75 li
546.25 271.25 li
540 271.25 li
540 273.75 li
543.75 273.75 li
543.75 276.25 li
536.25 276.25 li
536.25 268.75 li
547.5 268.75 li
553.75 268.75 li
553.75 262.5 li
553.75 251.25 li
561.25 251.25 li
561.25 258.75 li
558.75 258.75 li
558.75 255 li
556.25 255 li
556.25 261.25 li
563.75 261.25 li
563.75 251.25 li
563.75 248.75 li
563.75 238.75 li
556.25 238.75 li
556.25 245 li
558.75 245 li
558.75 241.25 li
561.25 241.25 li
561.25 248.75 li
553.75 248.75 li
553.75 237.5 li
553.75 226.25 li
561.25 226.25 li
561.25 233.75 li
558.75 233.75 li
558.75 230 li
556.25 230 li
556.25 236.25 li
563.75 236.25 li
563.75 226.25 li
563.75 223.75 li
563.75 213.75 li
556.25 213.75 li
556.25 220 li
558.75 220 li
558.75 216.25 li
561.25 216.25 li
561.25 223.75 li
553.75 223.75 li
553.75 212.5 li
553.75 201.25 li
561.25 201.25 li
561.25 208.75 li
558.75 208.75 li
558.75 205 li
556.25 205 li
556.25 211.25 li
563.75 211.25 li
563.75 201.25 li
563.75 198.75 li
563.75 188.75 li
556.25 188.75 li
556.25 195 li
558.75 195 li
558.75 191.25 li
561.25 191.25 li
561.25 198.75 li
553.75 198.75 li
553.75 187.5 li
553.75 181.25 li
547.5 181.25 li
536.25 181.25 li
536.25 173.75 li
543.75 173.75 li
543.75 176.25 li
540 176.25 li
540 178.75 li
546.25 178.75 li
546.25 171.25 li
536.25 171.25 li
533.75 171.25 li
523.75 171.25 li
523.75 178.75 li
530 178.75 li
530 176.25 li
526.25 176.25 li
526.25 173.75 li
533.75 173.75 li
533.75 181.25 li
522.5 181.25 li
511.25 181.25 li
511.25 173.75 li
518.75 173.75 li
518.75 176.25 li
515 176.25 li
515 178.75 li
521.25 178.75 li
521.25 171.25 li
511.25 171.25 li
508.75 171.25 li
498.75 171.25 li
498.75 178.75 li
505 178.75 li
505 176.25 li
501.25 176.25 li
501.25 173.75 li
508.75 173.75 li
508.75 181.25 li
497.5 181.25 li
486.25 181.25 li
486.25 173.75 li
493.75 173.75 li
493.75 176.25 li
490 176.25 li
490 178.75 li
496.25 178.75 li
496.25 171.25 li
486.25 171.25 li
483.75 171.25 li
473.75 171.25 li
473.75 178.75 li
480 178.75 li
480 176.25 li
476.25 176.25 li
476.25 173.75 li
483.75 173.75 li
483.75 181.25 li
472.5 181.25 li
461.25 181.25 li
461.25 173.75 li
468.75 173.75 li
468.75 176.25 li
465 176.25 li
465 178.75 li
471.25 178.75 li
471.25 171.25 li
461.25 171.25 li
458.75 171.25 li
448.75 171.25 li
448.75 178.75 li
455 178.75 li
455 176.25 li
451.25 176.25 li
451.25 173.75 li
458.75 173.75 li
458.75 181.25 li
447.5 181.25 li
436.25 181.25 li
436.25 173.75 li
443.75 173.75 li
443.75 176.25 li
440 176.25 li
440 178.75 li
446.25 178.75 li
446.25 171.25 li
436.25 171.25 li
433.75 171.25 li
423.75 171.25 li
423.75 178.75 li
430 178.75 li
430 176.25 li
426.25 176.25 li
426.25 173.75 li
433.75 173.75 li
433.75 181.25 li
422.5 181.25 li
416.25 181.25 li
416.25 187.5 li
416.25 198.75 li
408.75 198.75 li
408.75 191.25 li
411.25 191.25 li
411.25 195 li
413.75 195 li
413.75 188.75 li
406.25 188.75 li
406.25 198.75 li
406.25 201.25 li
406.25 211.25 li
413.75 211.25 li
413.75 205 li
411.25 205 li
411.25 208.75 li
408.75 208.75 li
408.75 201.25 li
416.25 201.25 li
416.25 212.5 li
416.25 223.75 li
408.75 223.75 li
408.75 216.25 li
411.25 216.25 li
411.25 220 li
413.75 220 li
413.75 213.75 li
406.25 213.75 li
406.25 223.75 li
406.25 226.25 li
406.25 236.25 li
413.75 236.25 li
413.75 230 li
411.25 230 li
411.25 233.75 li
408.75 233.75 li
408.75 226.25 li
416.25 226.25 li
416.25 237.5 li
416.25 248.75 li
408.75 248.75 li
408.75 241.25 li
411.25 241.25 li
411.25 245 li
413.75 245 li
413.75 238.75 li
406.25 238.75 li
406.25 248.75 li
406.25 251.25 li
406.25 261.25 li
413.75 261.25 li
413.75 255 li
411.25 255 li
411.25 258.75 li
408.75 258.75 li
408.75 251.25 li
416.25 251.25 li
416.25 262.5 li
416.25 268.75 li
422.5 268.75 li
433.75 268.75 li
433.75 276.25 li
426.25 276.25 li
426.25 273.75 li
430 273.75 li
430 271.25 li
423.75 271.25 li
423.75 278.75 li
433.75 278.75 li
436.25 278.75 li
446.25 278.75 li
446.25 271.25 li
440 271.25 li
440 273.75 li
443.75 273.75 li
443.75 276.25 li
436.25 276.25 li
436.25 268.75 li
447.5 268.75 li
458.75 268.75 li
458.75 276.25 li
451.25 276.25 li
451.25 273.75 li
455 273.75 li
455 271.25 li
448.75 271.25 li
448.75 278.75 li
458.75 278.75 li
461.25 278.75 li
471.25 278.75 li
471.25 271.25 li
465 271.25 li
465 273.75 li
468.75 273.75 li
468.75 276.25 li
461.25 276.25 li
461.25 268.75 li
472.5 268.75 li
483.75 268.75 li
483.75 276.25 li
476.25 276.25 li
476.25 273.75 li
480 273.75 li
480 271.25 li
473.75 271.25 li
473.75 278.75 li
483.75 278.75 li
486.25 278.75 li
496.25 278.75 li
496.25 271.25 li
490 271.25 li
490 273.75 li
493.75 273.75 li
493.75 276.25 li
486.25 276.25 li
486.25 268.75 li
497.5 268.75 li
508.75 268.75 li
508.75 276.25 li
501.25 276.25 li
501.25 273.75 li
505 273.75 li
505 271.25 li
498.75 271.25 li
498.75 278.75 li
508.75 278.75 li
511.25 278.75 li
521.25 278.75 li
521.25 271.25 li
515 271.25 li
515 273.75 li
518.75 273.75 li
518.75 276.25 li
511.25 276.25 li
511.25 268.75 li
522.5 268.75 li
533.75 268.75 li
533.75 276.25 li
526.25 276.25 li
526.25 273.75 li
530 273.75 li
530 271.25 li
523.75 271.25 li
523.75 278.75 li
533.75 278.75 li
536.25 278.75 li
cp
f
413.75 186.25 mo
413.75 180 li
411.25 180 li
411.25 182.5 li
411.25 183.75 li
408.75 183.75 li
408.75 182.5 li
408.75 176.25 li
411.25 176.25 li
411.25 173.75 li
417.5 173.75 li
418.75 173.75 li
418.75 176.25 li
417.5 176.25 li
415 176.25 li
415 178.75 li
421.25 178.75 li
421.25 171.25 li
411.25 171.25 li
408.75 171.25 li
406.25 171.25 li
406.25 173.75 li
406.25 176.25 li
406.25 186.25 li
413.75 186.25 li
cp
f
555 178.75 mo
555 176.25 li
552.5 176.25 li
551.25 176.25 li
551.25 173.75 li
552.5 173.75 li
558.75 173.75 li
558.75 176.25 li
561.25 176.25 li
561.25 182.5 li
561.25 183.75 li
558.75 183.75 li
558.75 182.5 li
558.75 180 li
556.25 180 li
556.25 186.25 li
563.75 186.25 li
563.75 176.25 li
563.75 173.75 li
563.75 171.25 li
561.25 171.25 li
558.75 171.25 li
548.75 171.25 li
548.75 178.75 li
555 178.75 li
cp
f
556.25 263.75 mo
556.25 270 li
558.75 270 li
558.75 267.5 li
558.75 266.25 li
561.25 266.25 li
561.25 267.5 li
561.25 273.75 li
558.75 273.75 li
558.75 276.25 li
552.5 276.25 li
551.25 276.25 li
551.25 273.75 li
552.5 273.75 li
555 273.75 li
555 271.25 li
548.75 271.25 li
548.75 278.75 li
558.75 278.75 li
561.25 278.75 li
563.75 278.75 li
563.75 276.25 li
563.75 273.75 li
563.75 263.75 li
556.25 263.75 li
cp
f
415 271.25 mo
415 273.75 li
417.5 273.75 li
418.75 273.75 li
418.75 276.25 li
417.5 276.25 li
411.25 276.25 li
411.25 273.75 li
408.75 273.75 li
408.75 267.5 li
408.75 266.25 li
411.25 266.25 li
411.25 267.5 li
411.25 270 li
413.75 270 li
413.75 263.75 li
406.25 263.75 li
406.25 273.75 li
406.25 276.25 li
406.25 278.75 li
408.75 278.75 li
411.25 278.75 li
421.25 278.75 li
421.25 271.25 li
415 271.25 li
cp
f
546 57.8027 mo
549 57.8027 li
549 60.8027 li
546 60.8027 li
546 57.8027 li
cp
537 48.8027 mo
537 54.8027 li
531 54.8027 li
531 72.8027 li
526.5 72.8027 li
504 72.8027 li
504 63.8027 li
507 63.8027 li
507 69.8027 li
522 69.8027 li
522 63.8027 li
528 63.8027 li
528 45.8027 li
532.5 45.8027 li
555 45.8027 li
555 54.8027 li
552 54.8027 li
552 48.8027 li
537 48.8027 li
cp
510 57.8027 mo
513 57.8027 li
513 60.8027 li
510 60.8027 li
510 57.8027 li
cp
501 48.8027 mo
501 54.8027 li
495 54.8027 li
495 72.8027 li
490.5 72.8027 li
468 72.8027 li
468 63.8027 li
471 63.8027 li
471 69.8027 li
486 69.8027 li
486 63.8027 li
492 63.8027 li
492 45.8027 li
496.5 45.8027 li
519 45.8027 li
519 54.8027 li
516 54.8027 li
516 48.8027 li
501 48.8027 li
cp
474 57.8027 mo
477 57.8027 li
477 60.8027 li
474 60.8027 li
474 57.8027 li
cp
465 48.8027 mo
465 54.8027 li
459 54.8027 li
459 72.8027 li
454.5 72.8027 li
432 72.8027 li
432 63.8027 li
435 63.8027 li
435 69.8027 li
450 69.8027 li
450 63.8027 li
456 63.8027 li
456 45.8027 li
460.5 45.8027 li
483 45.8027 li
483 54.8027 li
480 54.8027 li
480 48.8027 li
465 48.8027 li
cp
438 57.8027 mo
441 57.8027 li
441 60.8027 li
438 60.8027 li
438 57.8027 li
cp
429 48.8027 mo
429 54.8027 li
423 54.8027 li
423 72.8027 li
418.5 72.8027 li
396 72.8027 li
396 63.8027 li
399 63.8027 li
399 69.8027 li
414 69.8027 li
414 63.8027 li
420 63.8027 li
420 45.8027 li
424.5 45.8027 li
447 45.8027 li
447 54.8027 li
444 54.8027 li
444 48.8027 li
429 48.8027 li
cp
402 57.8027 mo
405 57.8027 li
405 60.8027 li
402 60.8027 li
402 57.8027 li
cp
393 48.8027 mo
393 54.8027 li
390 54.8027 li
387 54.8027 li
387 72.8027 li
382.5 72.8027 li
360 72.8027 li
360 63.8027 li
363 63.8027 li
363 69.8027 li
378 69.8027 li
378 63.8027 li
384 63.8027 li
384 45.8027 li
390 45.8027 li
411 45.8027 li
411 54.8027 li
408 54.8027 li
408 48.8027 li
393 48.8027 li
cp
366 57.8027 mo
369 57.8027 li
369 60.8027 li
366 60.8027 li
366 57.8027 li
cp
357 48.8027 mo
357 54.8027 li
351 54.8027 li
351 72.8027 li
346.5 72.8027 li
324 72.8027 li
324 63.8027 li
327 63.8027 li
327 69.8027 li
342 69.8027 li
342 63.8027 li
348 63.8027 li
348 45.8027 li
352.5 45.8027 li
375 45.8027 li
375 54.8027 li
372 54.8027 li
372 48.8027 li
357 48.8027 li
cp
330 57.8027 mo
333 57.8027 li
333 60.8027 li
330 60.8027 li
330 57.8027 li
cp
321 48.8027 mo
321 54.8027 li
315 54.8027 li
315 72.8027 li
310.5 72.8027 li
288 72.8027 li
288 63.8027 li
291 63.8027 li
291 69.8027 li
306 69.8027 li
306 63.8027 li
312 63.8027 li
312 45.8027 li
316.5 45.8027 li
339 45.8027 li
339 54.8027 li
336 54.8027 li
336 48.8027 li
321 48.8027 li
cp
294 57.8027 mo
297 57.8027 li
297 60.8027 li
294 60.8027 li
294 57.8027 li
cp
285 48.8027 mo
285 54.8027 li
279 54.8027 li
279 72.8027 li
274.5 72.8027 li
252 72.8027 li
252 63.8027 li
255 63.8027 li
255 69.8027 li
270 69.8027 li
270 63.8027 li
276 63.8027 li
276 45.8027 li
280.5 45.8027 li
303 45.8027 li
303 54.8027 li
300 54.8027 li
300 48.8027 li
285 48.8027 li
cp
258 57.8027 mo
261 57.8027 li
261 60.8027 li
258 60.8027 li
258 57.8027 li
cp
249 48.8027 mo
249 54.8027 li
243 54.8027 li
243 72.8027 li
238.5 72.8027 li
216 72.8027 li
216 63.8027 li
219 63.8027 li
219 69.8027 li
234 69.8027 li
234 63.8027 li
240 63.8027 li
240 45.8027 li
244.5 45.8027 li
267 45.8027 li
267 54.8027 li
264 54.8027 li
264 48.8027 li
249 48.8027 li
cp
222 57.8027 mo
225 57.8027 li
225 60.8027 li
222 60.8027 li
222 57.8027 li
cp
213 48.8027 mo
213 54.8027 li
207 54.8027 li
207 72.8027 li
202.5 72.8027 li
180 72.8027 li
180 63.8027 li
183 63.8027 li
183 69.8027 li
198 69.8027 li
198 63.8027 li
204 63.8027 li
204 45.8027 li
208.5 45.8027 li
231 45.8027 li
231 54.8027 li
228 54.8027 li
228 48.8027 li
213 48.8027 li
cp
186 57.8027 mo
189 57.8027 li
189 60.8027 li
186 60.8027 li
186 57.8027 li
cp
177 48.8027 mo
177 54.8027 li
171 54.8027 li
171 72.8027 li
166.5 72.8027 li
144 72.8027 li
144 63.8027 li
147 63.8027 li
147 69.8027 li
162 69.8027 li
162 63.8027 li
168 63.8027 li
168 45.8027 li
172.5 45.8027 li
195 45.8027 li
195 54.8027 li
192 54.8027 li
192 48.8027 li
177 48.8027 li
cp
150 57.8027 mo
153 57.8027 li
153 60.8027 li
150 60.8027 li
150 57.8027 li
cp
141 48.8027 mo
141 54.8027 li
135 54.8027 li
135 72.8027 li
130.5 72.8027 li
108 72.8027 li
108 63.8027 li
111 63.8027 li
111 69.8027 li
126 69.8027 li
126 63.8027 li
132 63.8027 li
132 45.8027 li
136.5 45.8027 li
159 45.8027 li
159 54.8027 li
156 54.8027 li
156 48.8027 li
141 48.8027 li
cp
114 57.8027 mo
117 57.8027 li
117 60.8027 li
114 60.8027 li
114 57.8027 li
cp
105 48.8027 mo
105 54.8027 li
99 54.8027 li
99 72.8027 li
94.5 72.8027 li
72 72.8027 li
72 63.8027 li
75 63.8027 li
75 69.8027 li
90 69.8027 li
90 63.8027 li
96 63.8027 li
96 45.8027 li
100.5 45.8027 li
123 45.8027 li
123 54.8027 li
120 54.8027 li
120 48.8027 li
105 48.8027 li
cp
78 57.8027 mo
81 57.8027 li
81 60.8027 li
78 60.8027 li
78 57.8027 li
cp
69 48.8027 mo
69 54.8027 li
63 54.8027 li
63 72.8027 li
58.5 72.8027 li
36 72.8027 li
36 63.8027 li
39 63.8027 li
39 69.8027 li
54 69.8027 li
54 63.8027 li
60 63.8027 li
60 45.8027 li
64.5 45.8027 li
87 45.8027 li
87 54.8027 li
84 54.8027 li
84 48.8027 li
69 48.8027 li
cp
42 57.8027 mo
45 57.8027 li
45 60.8027 li
42 60.8027 li
42 57.8027 li
cp
558 69.8027 mo
558 63.8027 li
564 63.8027 li
564 45.8027 li
568.5 45.8027 li
570 45.8027 li
570 42.8027 li
568.5 42.8027 li
561 42.8027 li
561 60.8027 li
555 60.8027 li
555 66.8027 li
546 66.8027 li
546 63.8027 li
552 63.8027 li
552 57.8027 li
558 57.8027 li
558 42.8027 li
532.5 42.8027 li
525 42.8027 li
525 60.8027 li
519 60.8027 li
519 66.8027 li
510 66.8027 li
510 63.8027 li
516 63.8027 li
516 57.8027 li
522 57.8027 li
522 42.8027 li
496.5 42.8027 li
489 42.8027 li
489 60.8027 li
483 60.8027 li
483 66.8027 li
474 66.8027 li
474 63.8027 li
480 63.8027 li
480 57.8027 li
486 57.8027 li
486 42.8027 li
460.5 42.8027 li
453 42.8027 li
453 60.8027 li
447 60.8027 li
447 66.8027 li
438 66.8027 li
438 63.8027 li
444 63.8027 li
444 57.8027 li
450 57.8027 li
450 42.8027 li
424.5 42.8027 li
417 42.8027 li
417 60.8027 li
411 60.8027 li
411 66.8027 li
402 66.8027 li
402 63.8027 li
408 63.8027 li
408 57.8027 li
414 57.8027 li
414 42.8027 li
390 42.8027 li
381 42.8027 li
381 60.8027 li
375 60.8027 li
375 66.8027 li
366 66.8027 li
366 63.8027 li
372 63.8027 li
372 57.8027 li
378 57.8027 li
378 42.8027 li
352.5 42.8027 li
345 42.8027 li
345 60.8027 li
339 60.8027 li
339 66.8027 li
330 66.8027 li
330 63.8027 li
336 63.8027 li
336 57.8027 li
342 57.8027 li
342 42.8027 li
316.5 42.8027 li
309 42.8027 li
309 60.8027 li
303 60.8027 li
303 66.8027 li
294 66.8027 li
294 63.8027 li
300 63.8027 li
300 57.8027 li
306 57.8027 li
306 42.8027 li
280.5 42.8027 li
273 42.8027 li
273 60.8027 li
267 60.8027 li
267 66.8027 li
258 66.8027 li
258 63.8027 li
264 63.8027 li
264 57.8027 li
270 57.8027 li
270 42.8027 li
244.5 42.8027 li
237 42.8027 li
237 60.8027 li
231 60.8027 li
231 66.8027 li
222 66.8027 li
222 63.8027 li
228 63.8027 li
228 57.8027 li
234 57.8027 li
234 42.8027 li
208.5 42.8027 li
201 42.8027 li
201 60.8027 li
195 60.8027 li
195 66.8027 li
186 66.8027 li
186 63.8027 li
192 63.8027 li
192 57.8027 li
198 57.8027 li
198 42.8027 li
172.5 42.8027 li
165 42.8027 li
165 60.8027 li
159 60.8027 li
159 66.8027 li
150 66.8027 li
150 63.8027 li
156 63.8027 li
156 57.8027 li
162 57.8027 li
162 42.8027 li
136.5 42.8027 li
129 42.8027 li
129 60.8027 li
123 60.8027 li
123 66.8027 li
114 66.8027 li
114 63.8027 li
120 63.8027 li
120 57.8027 li
126 57.8027 li
126 42.8027 li
100.5 42.8027 li
93 42.8027 li
93 60.8027 li
87 60.8027 li
87 66.8027 li
78 66.8027 li
78 63.8027 li
84 63.8027 li
84 57.8027 li
90 57.8027 li
90 42.8027 li
64.5 42.8027 li
57 42.8027 li
57 60.8027 li
51 60.8027 li
51 66.8027 li
42 66.8027 li
42 63.8027 li
48 63.8027 li
48 57.8027 li
54 57.8027 li
54 42.8027 li
30 42.8027 li
30 45.8027 li
51 45.8027 li
51 54.8027 li
48 54.8027 li
48 48.8027 li
33 48.8027 li
33 54.8027 li
30 54.8027 li
30 57.8027 li
36 57.8027 li
36 51.8027 li
45 51.8027 li
45 54.8027 li
39 54.8027 li
39 60.8027 li
33 60.8027 li
33 75.8027 li
58.5 75.8027 li
66 75.8027 li
66 57.8027 li
72 57.8027 li
72 51.8027 li
81 51.8027 li
81 54.8027 li
75 54.8027 li
75 60.8027 li
69 60.8027 li
69 75.8027 li
94.5 75.8027 li
102 75.8027 li
102 57.8027 li
108 57.8027 li
108 51.8027 li
117 51.8027 li
117 54.8027 li
111 54.8027 li
111 60.8027 li
105 60.8027 li
105 75.8027 li
130.5 75.8027 li
138 75.8027 li
138 57.8027 li
144 57.8027 li
144 51.8027 li
153 51.8027 li
153 54.8027 li
147 54.8027 li
147 60.8027 li
141 60.8027 li
141 75.8027 li
166.5 75.8027 li
174 75.8027 li
174 57.8027 li
180 57.8027 li
180 51.8027 li
189 51.8027 li
189 54.8027 li
183 54.8027 li
183 60.8027 li
177 60.8027 li
177 75.8027 li
202.5 75.8027 li
210 75.8027 li
210 57.8027 li
216 57.8027 li
216 51.8027 li
225 51.8027 li
225 54.8027 li
219 54.8027 li
219 60.8027 li
213 60.8027 li
213 75.8027 li
238.5 75.8027 li
246 75.8027 li
246 57.8027 li
252 57.8027 li
252 51.8027 li
261 51.8027 li
261 54.8027 li
255 54.8027 li
255 60.8027 li
249 60.8027 li
249 75.8027 li
274.5 75.8027 li
282 75.8027 li
282 57.8027 li
288 57.8027 li
288 51.8027 li
297 51.8027 li
297 54.8027 li
291 54.8027 li
291 60.8027 li
285 60.8027 li
285 75.8027 li
310.5 75.8027 li
318 75.8027 li
318 57.8027 li
324 57.8027 li
324 51.8027 li
333 51.8027 li
333 54.8027 li
327 54.8027 li
327 60.8027 li
321 60.8027 li
321 75.8027 li
346.5 75.8027 li
354 75.8027 li
354 57.8027 li
360 57.8027 li
360 51.8027 li
369 51.8027 li
369 54.8027 li
363 54.8027 li
363 60.8027 li
357 60.8027 li
357 75.8027 li
382.5 75.8027 li
390 75.8027 li
390 57.8027 li
396 57.8027 li
396 51.8027 li
405 51.8027 li
405 54.8027 li
399 54.8027 li
399 60.8027 li
393 60.8027 li
393 75.8027 li
418.5 75.8027 li
426 75.8027 li
426 57.8027 li
432 57.8027 li
432 51.8027 li
441 51.8027 li
441 54.8027 li
435 54.8027 li
435 60.8027 li
429 60.8027 li
429 75.8027 li
454.5 75.8027 li
462 75.8027 li
462 57.8027 li
468 57.8027 li
468 51.8027 li
477 51.8027 li
477 54.8027 li
471 54.8027 li
471 60.8027 li
465 60.8027 li
465 75.8027 li
490.5 75.8027 li
498 75.8027 li
498 57.8027 li
504 57.8027 li
504 51.8027 li
513 51.8027 li
513 54.8027 li
507 54.8027 li
507 60.8027 li
501 60.8027 li
501 75.8027 li
526.5 75.8027 li
534 75.8027 li
534 57.8027 li
540 57.8027 li
540 51.8027 li
549 51.8027 li
549 54.8027 li
543 54.8027 li
543 60.8027 li
537 60.8027 li
537 75.8027 li
562.5 75.8027 li
570 75.8027 li
570 57.8027 li
570 54.8027 li
567 54.8027 li
567 72.8027 li
562.5 72.8027 li
540 72.8027 li
540 63.8027 li
543 63.8027 li
543 69.8027 li
558 69.8027 li
cp
f
552 106.203 mo
552 112.203 li
543 112.203 li
543 109.203 li
549 109.203 li
549 103.203 li
555 103.203 li
555 97.2026 li
564 97.2026 li
564 100.203 li
558 100.203 li
558 106.203 li
552 106.203 li
cp
546 103.203 mo
546 106.203 li
543 106.203 li
543 103.203 li
546 103.203 li
cp
540 106.203 mo
534 106.203 li
534 112.203 li
525 112.203 li
525 109.203 li
531 109.203 li
531 103.203 li
537 103.203 li
537 97.2026 li
546 97.2026 li
546 100.203 li
540 100.203 li
540 106.203 li
cp
522 112.203 mo
513 112.203 li
513 109.203 li
519 109.203 li
519 103.203 li
525 103.203 li
525 97.2026 li
534 97.2026 li
534 100.203 li
528 100.203 li
528 106.203 li
522 106.203 li
522 112.203 li
cp
516 103.203 mo
516 106.203 li
513 106.203 li
513 103.203 li
516 103.203 li
cp
510 106.203 mo
504 106.203 li
504 112.203 li
495 112.203 li
495 109.203 li
501 109.203 li
501 103.203 li
507 103.203 li
507 97.2026 li
516 97.2026 li
516 100.203 li
510 100.203 li
510 106.203 li
cp
492 112.203 mo
483 112.203 li
483 109.203 li
489 109.203 li
489 103.203 li
495 103.203 li
495 97.2026 li
504 97.2026 li
504 100.203 li
498 100.203 li
498 106.203 li
492 106.203 li
492 112.203 li
cp
486 103.203 mo
486 106.203 li
483 106.203 li
483 103.203 li
486 103.203 li
cp
480 106.203 mo
474 106.203 li
474 112.203 li
465 112.203 li
465 109.203 li
471 109.203 li
471 103.203 li
477 103.203 li
477 97.2026 li
486 97.2026 li
486 100.203 li
480 100.203 li
480 106.203 li
cp
462 112.203 mo
453 112.203 li
453 109.203 li
459 109.203 li
459 103.203 li
465 103.203 li
465 97.2026 li
474 97.2026 li
474 100.203 li
468 100.203 li
468 106.203 li
462 106.203 li
462 112.203 li
cp
456 103.203 mo
456 106.203 li
453 106.203 li
453 103.203 li
456 103.203 li
cp
450 106.203 mo
444 106.203 li
444 112.203 li
435 112.203 li
435 109.203 li
441 109.203 li
441 103.203 li
447 103.203 li
447 97.2026 li
456 97.2026 li
456 100.203 li
450 100.203 li
450 106.203 li
cp
432 112.203 mo
423 112.203 li
423 109.203 li
429 109.203 li
429 103.203 li
435 103.203 li
435 97.2026 li
444 97.2026 li
444 100.203 li
438 100.203 li
438 106.203 li
432 106.203 li
432 112.203 li
cp
426 103.203 mo
426 106.203 li
423 106.203 li
423 103.203 li
426 103.203 li
cp
420 106.203 mo
414 106.203 li
414 112.203 li
405 112.203 li
405 109.203 li
411 109.203 li
411 103.203 li
417 103.203 li
417 97.2026 li
426 97.2026 li
426 100.203 li
420 100.203 li
420 106.203 li
cp
402 112.203 mo
393 112.203 li
393 109.203 li
399 109.203 li
399 103.203 li
405 103.203 li
405 97.2026 li
414 97.2026 li
414 100.203 li
408 100.203 li
408 106.203 li
402 106.203 li
402 112.203 li
cp
396 103.203 mo
396 106.203 li
393 106.203 li
393 103.203 li
396 103.203 li
cp
390 106.203 mo
384 106.203 li
384 112.203 li
375 112.203 li
375 109.203 li
381 109.203 li
381 103.203 li
387 103.203 li
387 97.2026 li
390 97.2026 li
396 97.2026 li
396 100.203 li
390 100.203 li
390 106.203 li
cp
372 106.203 mo
372 112.203 li
363 112.203 li
363 109.203 li
369 109.203 li
369 103.203 li
375 103.203 li
375 97.2026 li
384 97.2026 li
384 100.203 li
378 100.203 li
378 106.203 li
372 106.203 li
cp
366 103.203 mo
366 106.203 li
363 106.203 li
363 103.203 li
366 103.203 li
cp
360 106.203 mo
354 106.203 li
354 112.203 li
345 112.203 li
345 109.203 li
351 109.203 li
351 103.203 li
357 103.203 li
357 97.2026 li
366 97.2026 li
366 100.203 li
360 100.203 li
360 106.203 li
cp
342 112.203 mo
333 112.203 li
333 109.203 li
339 109.203 li
339 103.203 li
345 103.203 li
345 97.2026 li
354 97.2026 li
354 100.203 li
348 100.203 li
348 106.203 li
342 106.203 li
342 112.203 li
cp
336 103.203 mo
336 106.203 li
333 106.203 li
333 103.203 li
336 103.203 li
cp
330 106.203 mo
324 106.203 li
324 112.203 li
315 112.203 li
315 109.203 li
321 109.203 li
321 103.203 li
327 103.203 li
327 97.2026 li
336 97.2026 li
336 100.203 li
330 100.203 li
330 106.203 li
cp
312 112.203 mo
303 112.203 li
303 109.203 li
309 109.203 li
309 103.203 li
315 103.203 li
315 97.2026 li
324 97.2026 li
324 100.203 li
318 100.203 li
318 106.203 li
312 106.203 li
312 112.203 li
cp
306 103.203 mo
306 106.203 li
303 106.203 li
303 103.203 li
306 103.203 li
cp
300 106.203 mo
294 106.203 li
294 112.203 li
285 112.203 li
285 109.203 li
291 109.203 li
291 103.203 li
297 103.203 li
297 97.2026 li
306 97.2026 li
306 100.203 li
300 100.203 li
300 106.203 li
cp
282 112.203 mo
273 112.203 li
273 109.203 li
279 109.203 li
279 103.203 li
285 103.203 li
285 97.2026 li
294 97.2026 li
294 100.203 li
288 100.203 li
288 106.203 li
282 106.203 li
282 112.203 li
cp
276 103.203 mo
276 106.203 li
273 106.203 li
273 103.203 li
276 103.203 li
cp
270 106.203 mo
264 106.203 li
264 112.203 li
255 112.203 li
255 109.203 li
261 109.203 li
261 103.203 li
267 103.203 li
267 97.2026 li
276 97.2026 li
276 100.203 li
270 100.203 li
270 106.203 li
cp
252 112.203 mo
243 112.203 li
243 109.203 li
249 109.203 li
249 103.203 li
255 103.203 li
255 97.2026 li
264 97.2026 li
264 100.203 li
258 100.203 li
258 106.203 li
252 106.203 li
252 112.203 li
cp
246 103.203 mo
246 106.203 li
243 106.203 li
243 103.203 li
246 103.203 li
cp
240 106.203 mo
234 106.203 li
234 112.203 li
225 112.203 li
225 109.203 li
231 109.203 li
231 103.203 li
237 103.203 li
237 97.2026 li
246 97.2026 li
246 100.203 li
240 100.203 li
240 106.203 li
cp
222 112.203 mo
213 112.203 li
213 109.203 li
219 109.203 li
219 103.203 li
225 103.203 li
225 97.2026 li
234 97.2026 li
234 100.203 li
228 100.203 li
228 106.203 li
222 106.203 li
222 112.203 li
cp
216 103.203 mo
216 106.203 li
213 106.203 li
213 103.203 li
216 103.203 li
cp
210 106.203 mo
204 106.203 li
204 112.203 li
195 112.203 li
195 109.203 li
201 109.203 li
201 103.203 li
207 103.203 li
207 97.2026 li
216 97.2026 li
216 100.203 li
210 100.203 li
210 106.203 li
cp
192 112.203 mo
183 112.203 li
183 109.203 li
189 109.203 li
189 103.203 li
195 103.203 li
195 97.2026 li
204 97.2026 li
204 100.203 li
198 100.203 li
198 106.203 li
192 106.203 li
192 112.203 li
cp
186 103.203 mo
186 106.203 li
183 106.203 li
183 103.203 li
186 103.203 li
cp
180 106.203 mo
174 106.203 li
174 112.203 li
165 112.203 li
165 109.203 li
171 109.203 li
171 103.203 li
177 103.203 li
177 97.2026 li
186 97.2026 li
186 100.203 li
180 100.203 li
180 106.203 li
cp
162 112.203 mo
153 112.203 li
153 109.203 li
159 109.203 li
159 103.203 li
165 103.203 li
165 97.2026 li
174 97.2026 li
174 100.203 li
168 100.203 li
168 106.203 li
162 106.203 li
162 112.203 li
cp
156 103.203 mo
156 106.203 li
153 106.203 li
153 103.203 li
156 103.203 li
cp
150 106.203 mo
144 106.203 li
144 112.203 li
135 112.203 li
135 109.203 li
141 109.203 li
141 103.203 li
147 103.203 li
147 97.2026 li
156 97.2026 li
156 100.203 li
150 100.203 li
150 106.203 li
cp
132 112.203 mo
123 112.203 li
123 109.203 li
129 109.203 li
129 103.203 li
135 103.203 li
135 97.2026 li
144 97.2026 li
144 100.203 li
138 100.203 li
138 106.203 li
132 106.203 li
132 112.203 li
cp
126 103.203 mo
126 106.203 li
123 106.203 li
123 103.203 li
126 103.203 li
cp
120 106.203 mo
114 106.203 li
114 112.203 li
105 112.203 li
105 109.203 li
111 109.203 li
111 103.203 li
117 103.203 li
117 97.2026 li
126 97.2026 li
126 100.203 li
120 100.203 li
120 106.203 li
cp
102 112.203 mo
93 112.203 li
93 109.203 li
99 109.203 li
99 103.203 li
105 103.203 li
105 97.2026 li
114 97.2026 li
114 100.203 li
108 100.203 li
108 106.203 li
102 106.203 li
102 112.203 li
cp
96 103.203 mo
96 106.203 li
93 106.203 li
93 103.203 li
96 103.203 li
cp
90 106.203 mo
84 106.203 li
84 112.203 li
75 112.203 li
75 109.203 li
81 109.203 li
81 103.203 li
87 103.203 li
87 97.2026 li
96 97.2026 li
96 100.203 li
90 100.203 li
90 106.203 li
cp
72 112.203 mo
63 112.203 li
63 109.203 li
69 109.203 li
69 103.203 li
75 103.203 li
75 97.2026 li
84 97.2026 li
84 100.203 li
78 100.203 li
78 106.203 li
72 106.203 li
72 112.203 li
cp
66 103.203 mo
66 106.203 li
63 106.203 li
63 103.203 li
66 103.203 li
cp
60 106.203 mo
54 106.203 li
54 112.203 li
45 112.203 li
45 109.203 li
51 109.203 li
51 103.203 li
57 103.203 li
57 97.2026 li
66 97.2026 li
66 100.203 li
60 100.203 li
60 106.203 li
cp
42 112.203 mo
33 112.203 li
33 109.203 li
39 109.203 li
39 103.203 li
45 103.203 li
45 97.2026 li
54 97.2026 li
54 100.203 li
48 100.203 li
48 106.203 li
42 106.203 li
42 112.203 li
cp
33 103.203 mo
36 103.203 li
36 106.203 li
33 106.203 li
33 103.203 li
cp
561 109.203 mo
561 103.203 li
567 103.203 li
567 97.2026 li
570 97.2026 li
570 94.2026 li
552 94.2026 li
552 100.203 li
549 100.203 li
549 94.2026 li
522 94.2026 li
522 100.203 li
519 100.203 li
519 94.2026 li
492 94.2026 li
492 100.203 li
489 100.203 li
489 94.2026 li
462 94.2026 li
462 100.203 li
459 100.203 li
459 94.2026 li
432 94.2026 li
432 100.203 li
429 100.203 li
429 94.2026 li
402 94.2026 li
402 100.203 li
399 100.203 li
399 94.2026 li
390 94.2026 li
372 94.2026 li
372 100.203 li
369 100.203 li
369 94.2026 li
342 94.2026 li
342 100.203 li
339 100.203 li
339 94.2026 li
312 94.2026 li
312 100.203 li
309 100.203 li
309 94.2026 li
282 94.2026 li
282 100.203 li
279 100.203 li
279 94.2026 li
252 94.2026 li
252 100.203 li
249 100.203 li
249 94.2026 li
222 94.2026 li
222 100.203 li
219 100.203 li
219 94.2026 li
192 94.2026 li
192 100.203 li
189 100.203 li
189 94.2026 li
162 94.2026 li
162 100.203 li
159 100.203 li
159 94.2026 li
132 94.2026 li
132 100.203 li
129 100.203 li
129 94.2026 li
102 94.2026 li
102 100.203 li
99 100.203 li
99 94.2026 li
72 94.2026 li
72 100.203 li
69 100.203 li
69 94.2026 li
42 94.2026 li
42 100.203 li
39 100.203 li
39 94.2026 li
30 94.2026 li
30 97.2026 li
36 97.2026 li
36 100.203 li
30 100.203 li
30 106.203 li
30 109.203 li
30 115.203 li
57 115.203 li
57 109.203 li
60 109.203 li
60 115.203 li
87 115.203 li
87 109.203 li
90 109.203 li
90 115.203 li
117 115.203 li
117 109.203 li
120 109.203 li
120 115.203 li
147 115.203 li
147 109.203 li
150 109.203 li
150 115.203 li
177 115.203 li
177 109.203 li
180 109.203 li
180 115.203 li
207 115.203 li
207 109.203 li
210 109.203 li
210 115.203 li
237 115.203 li
237 109.203 li
240 109.203 li
240 115.203 li
267 115.203 li
267 109.203 li
270 109.203 li
270 115.203 li
297 115.203 li
297 109.203 li
300 109.203 li
300 115.203 li
327 115.203 li
327 109.203 li
330 109.203 li
330 115.203 li
357 115.203 li
357 109.203 li
360 109.203 li
360 115.203 li
373.5 115.203 li
375 115.203 li
387 115.203 li
387 109.203 li
390 109.203 li
390 115.203 li
417 115.203 li
417 109.203 li
420 109.203 li
420 115.203 li
447 115.203 li
447 109.203 li
450 109.203 li
450 115.203 li
477 115.203 li
477 109.203 li
480 109.203 li
480 115.203 li
507 115.203 li
507 109.203 li
510 109.203 li
510 115.203 li
537 115.203 li
537 109.203 li
540 109.203 li
540 115.203 li
567 115.203 li
567 109.203 li
570 109.203 li
570 106.203 li
564 106.203 li
564 112.203 li
555 112.203 li
555 109.203 li
561 109.203 li
cp
f
552 352.451 mo
543 352.451 li
543 349.451 li
549 349.451 li
549 340.451 li
535.5 340.451 li
534 340.451 li
522 340.451 li
522 349.451 li
523.5 349.451 li
528 349.451 li
528 352.451 li
519 352.451 li
519 337.451 li
552 337.451 li
552 352.451 li
cp
534 358.451 mo
501 358.451 li
501 343.451 li
510 343.451 li
510 346.451 li
504 346.451 li
504 355.451 li
517.5 355.451 li
519 355.451 li
531 355.451 li
531 346.451 li
529.5 346.451 li
525 346.451 li
525 343.451 li
534 343.451 li
534 358.451 li
cp
498 340.451 mo
486 340.451 li
486 349.451 li
487.5 349.451 li
492 349.451 li
492 352.451 li
483 352.451 li
483 337.451 li
516 337.451 li
516 352.451 li
507 352.451 li
507 349.451 li
513 349.451 li
513 340.451 li
499.5 340.451 li
498 340.451 li
cp
498 358.451 mo
465 358.451 li
465 343.451 li
474 343.451 li
474 346.451 li
468 346.451 li
468 355.451 li
481.5 355.451 li
483 355.451 li
495 355.451 li
495 346.451 li
493.5 346.451 li
489 346.451 li
489 343.451 li
498 343.451 li
498 358.451 li
cp
462 340.451 mo
450 340.451 li
450 349.451 li
451.5 349.451 li
456 349.451 li
456 352.451 li
447 352.451 li
447 337.451 li
480 337.451 li
480 352.451 li
471 352.451 li
471 349.451 li
477 349.451 li
477 340.451 li
463.5 340.451 li
462 340.451 li
cp
462 358.451 mo
429 358.451 li
429 343.451 li
438 343.451 li
438 346.451 li
432 346.451 li
432 355.451 li
445.5 355.451 li
447 355.451 li
459 355.451 li
459 346.451 li
457.5 346.451 li
453 346.451 li
453 343.451 li
462 343.451 li
462 358.451 li
cp
426 340.451 mo
414 340.451 li
414 349.451 li
415.5 349.451 li
420 349.451 li
420 352.451 li
411 352.451 li
411 337.451 li
444 337.451 li
444 352.451 li
435 352.451 li
435 349.451 li
441 349.451 li
441 340.451 li
427.5 340.451 li
426 340.451 li
cp
426 358.451 mo
393 358.451 li
393 343.451 li
402 343.451 li
402 346.451 li
396 346.451 li
396 355.451 li
409.5 355.451 li
411 355.451 li
423 355.451 li
423 346.451 li
421.5 346.451 li
417 346.451 li
417 343.451 li
426 343.451 li
426 358.451 li
cp
378 340.451 mo
378 349.451 li
379.5 349.451 li
384 349.451 li
384 352.451 li
375 352.451 li
375 337.451 li
390 337.451 li
408 337.451 li
408 352.451 li
399 352.451 li
399 349.451 li
405 349.451 li
405 340.451 li
390 340.451 li
378 340.451 li
cp
390 358.451 mo
357 358.451 li
357 343.451 li
366 343.451 li
366 346.451 li
360 346.451 li
360 355.451 li
373.5 355.451 li
375 355.451 li
387 355.451 li
387 346.451 li
385.5 346.451 li
381 346.451 li
381 343.451 li
390 343.451 li
390 358.451 li
cp
354 340.451 mo
342 340.451 li
342 349.451 li
343.5 349.451 li
348 349.451 li
348 352.451 li
339 352.451 li
339 337.451 li
372 337.451 li
372 352.451 li
363 352.451 li
363 349.451 li
369 349.451 li
369 340.451 li
355.5 340.451 li
354 340.451 li
cp
354 358.451 mo
321 358.451 li
321 343.451 li
330 343.451 li
330 346.451 li
324 346.451 li
324 355.451 li
337.5 355.451 li
339 355.451 li
351 355.451 li
351 346.451 li
349.5 346.451 li
345 346.451 li
345 343.451 li
354 343.451 li
354 358.451 li
cp
318 340.451 mo
306 340.451 li
306 349.451 li
307.5 349.451 li
312 349.451 li
312 352.451 li
303 352.451 li
303 337.451 li
336 337.451 li
336 352.451 li
327 352.451 li
327 349.451 li
333 349.451 li
333 340.451 li
319.5 340.451 li
318 340.451 li
cp
318 358.451 mo
285 358.451 li
285 343.451 li
294 343.451 li
294 346.451 li
288 346.451 li
288 355.451 li
301.5 355.451 li
303 355.451 li
315 355.451 li
315 346.451 li
313.5 346.451 li
309 346.451 li
309 343.451 li
318 343.451 li
318 358.451 li
cp
282 340.451 mo
270 340.451 li
270 349.451 li
271.5 349.451 li
276 349.451 li
276 352.451 li
267 352.451 li
267 337.451 li
300 337.451 li
300 352.451 li
291 352.451 li
291 349.451 li
297 349.451 li
297 340.451 li
283.5 340.451 li
282 340.451 li
cp
282 358.451 mo
249 358.451 li
249 343.451 li
258 343.451 li
258 346.451 li
252 346.451 li
252 355.451 li
265.5 355.451 li
267 355.451 li
279 355.451 li
279 346.451 li
277.5 346.451 li
273 346.451 li
273 343.451 li
282 343.451 li
282 358.451 li
cp
246 340.451 mo
234 340.451 li
234 349.451 li
235.5 349.451 li
240 349.451 li
240 352.451 li
231 352.451 li
231 337.451 li
264 337.451 li
264 352.451 li
255 352.451 li
255 349.451 li
261 349.451 li
261 340.451 li
247.5 340.451 li
246 340.451 li
cp
246 358.451 mo
213 358.451 li
213 343.451 li
222 343.451 li
222 346.451 li
216 346.451 li
216 355.451 li
229.5 355.451 li
231 355.451 li
243 355.451 li
243 346.451 li
241.5 346.451 li
237 346.451 li
237 343.451 li
246 343.451 li
246 358.451 li
cp
210 340.451 mo
198 340.451 li
198 349.451 li
199.5 349.451 li
204 349.451 li
204 352.451 li
195 352.451 li
195 337.451 li
228 337.451 li
228 352.451 li
219 352.451 li
219 349.451 li
225 349.451 li
225 340.451 li
211.5 340.451 li
210 340.451 li
cp
210 358.451 mo
177 358.451 li
177 343.451 li
186 343.451 li
186 346.451 li
180 346.451 li
180 355.451 li
193.5 355.451 li
195 355.451 li
207 355.451 li
207 346.451 li
205.5 346.451 li
201 346.451 li
201 343.451 li
210 343.451 li
210 358.451 li
cp
174 340.451 mo
162 340.451 li
162 349.451 li
163.5 349.451 li
168 349.451 li
168 352.451 li
159 352.451 li
159 337.451 li
192 337.451 li
192 352.451 li
183 352.451 li
183 349.451 li
189 349.451 li
189 340.451 li
175.5 340.451 li
174 340.451 li
cp
174 358.451 mo
141 358.451 li
141 343.451 li
150 343.451 li
150 346.451 li
144 346.451 li
144 355.451 li
157.5 355.451 li
159 355.451 li
171 355.451 li
171 346.451 li
169.5 346.451 li
165 346.451 li
165 343.451 li
174 343.451 li
174 358.451 li
cp
138 340.451 mo
126 340.451 li
126 349.451 li
127.5 349.451 li
132 349.451 li
132 352.451 li
123 352.451 li
123 337.451 li
156 337.451 li
156 352.451 li
147 352.451 li
147 349.451 li
153 349.451 li
153 340.451 li
139.5 340.451 li
138 340.451 li
cp
138 358.451 mo
105 358.451 li
105 343.451 li
114 343.451 li
114 346.451 li
108 346.451 li
108 355.451 li
121.5 355.451 li
123 355.451 li
135 355.451 li
135 346.451 li
133.5 346.451 li
129 346.451 li
129 343.451 li
138 343.451 li
138 358.451 li
cp
102 340.451 mo
90 340.451 li
90 349.451 li
91.5 349.451 li
96 349.451 li
96 352.451 li
87 352.451 li
87 337.451 li
120 337.451 li
120 352.451 li
111 352.451 li
111 349.451 li
117 349.451 li
117 340.451 li
103.5 340.451 li
102 340.451 li
cp
102 358.451 mo
69 358.451 li
69 343.451 li
78 343.451 li
78 346.451 li
72 346.451 li
72 355.451 li
85.5 355.451 li
87 355.451 li
99 355.451 li
99 346.451 li
97.5 346.451 li
93 346.451 li
93 343.451 li
102 343.451 li
102 358.451 li
cp
66 340.451 mo
54 340.451 li
54 349.451 li
55.5 349.451 li
60 349.451 li
60 352.451 li
51 352.451 li
51 337.451 li
84 337.451 li
84 352.451 li
75 352.451 li
75 349.451 li
81 349.451 li
81 340.451 li
67.5 340.451 li
66 340.451 li
cp
66 358.451 mo
33 358.451 li
33 343.451 li
42 343.451 li
42 346.451 li
36 346.451 li
36 355.451 li
49.5 355.451 li
51 355.451 li
63 355.451 li
63 346.451 li
61.5 346.451 li
57 346.451 li
57 343.451 li
66 343.451 li
66 358.451 li
cp
570 337.451 mo
570 334.451 li
390 334.451 li
30 334.451 li
30 337.451 li
48 337.451 li
48 352.451 li
39 352.451 li
39 349.451 li
45 349.451 li
45 340.451 li
30 340.451 li
30 358.451 li
30 359.951 li
30 361.451 li
390 361.451 li
570 361.451 li
570 358.451 li
537 358.451 li
537 343.451 li
546 343.451 li
546 346.451 li
540 346.451 li
540 355.451 li
553.5 355.451 li
555 355.451 li
567 355.451 li
567 346.451 li
565.5 346.451 li
561 346.451 li
561 343.451 li
570 343.451 li
570 340.451 li
558 340.451 li
558 349.451 li
559.5 349.451 li
564 349.451 li
564 352.451 li
555 352.451 li
555 337.451 li
570 337.451 li
cp
f
37.7056 398.451 mo
40.7056 398.451 li
40.7056 383.451 li
30 383.451 li
30 386.451 li
37.7056 386.451 li
37.7056 398.451 li
cp
f
49.7056 392.451 mo
52.7056 392.451 li
52.7056 383.451 li
43.7056 383.451 li
43.7056 401.451 li
34.7056 401.451 li
34.7056 389.451 li
31.7056 389.451 li
31.7056 404.451 li
46.7056 404.451 li
46.7056 386.451 li
49.7056 386.451 li
49.7056 392.451 li
cp
f
67.7056 398.451 mo
70.7056 398.451 li
70.7056 383.451 li
55.7056 383.451 li
55.7056 401.451 li
52.7056 401.451 li
52.7056 395.451 li
49.7056 395.451 li
49.7056 404.451 li
58.7056 404.451 li
58.7056 386.451 li
67.7056 386.451 li
67.7056 398.451 li
cp
f
79.7056 392.451 mo
82.7056 392.451 li
82.7056 383.451 li
73.7056 383.451 li
73.7056 401.451 li
64.7056 401.451 li
64.7056 389.451 li
61.7056 389.451 li
61.7056 404.451 li
76.7056 404.451 li
76.7056 386.451 li
79.7056 386.451 li
79.7056 392.451 li
cp
f
97.7056 398.451 mo
100.706 398.451 li
100.706 383.451 li
85.7056 383.451 li
85.7056 401.451 li
82.7056 401.451 li
82.7056 395.451 li
79.7056 395.451 li
79.7056 404.451 li
88.7056 404.451 li
88.7056 386.451 li
97.7056 386.451 li
97.7056 398.451 li
cp
f
109.706 392.451 mo
112.706 392.451 li
112.706 383.451 li
103.706 383.451 li
103.706 401.451 li
94.7056 401.451 li
94.7056 389.451 li
91.7056 389.451 li
91.7056 404.451 li
106.706 404.451 li
106.706 386.451 li
109.706 386.451 li
109.706 392.451 li
cp
f
127.706 398.451 mo
130.706 398.451 li
130.706 383.451 li
115.706 383.451 li
115.706 401.451 li
112.706 401.451 li
112.706 395.451 li
109.706 395.451 li
109.706 404.451 li
118.706 404.451 li
118.706 386.451 li
127.706 386.451 li
127.706 398.451 li
cp
f
139.706 392.451 mo
142.706 392.451 li
142.706 383.451 li
133.706 383.451 li
133.706 401.451 li
124.706 401.451 li
124.706 389.451 li
121.706 389.451 li
121.706 404.451 li
136.706 404.451 li
136.706 386.451 li
139.706 386.451 li
139.706 392.451 li
cp
f
157.706 398.451 mo
160.706 398.451 li
160.706 383.451 li
145.706 383.451 li
145.706 401.451 li
142.706 401.451 li
142.706 395.451 li
139.706 395.451 li
139.706 404.451 li
148.706 404.451 li
148.706 386.451 li
157.706 386.451 li
157.706 398.451 li
cp
f
169.706 392.451 mo
172.706 392.451 li
172.706 383.451 li
163.706 383.451 li
163.706 401.451 li
154.706 401.451 li
154.706 389.451 li
151.706 389.451 li
151.706 404.451 li
166.706 404.451 li
166.706 386.451 li
169.706 386.451 li
169.706 392.451 li
cp
f
187.706 398.451 mo
190.706 398.451 li
190.706 383.451 li
175.706 383.451 li
175.706 401.451 li
172.706 401.451 li
172.706 395.451 li
169.706 395.451 li
169.706 404.451 li
178.706 404.451 li
178.706 386.451 li
187.706 386.451 li
187.706 398.451 li
cp
f
199.706 392.451 mo
202.706 392.451 li
202.706 383.451 li
193.706 383.451 li
193.706 401.451 li
184.706 401.451 li
184.706 389.451 li
181.706 389.451 li
181.706 404.451 li
196.706 404.451 li
196.706 386.451 li
199.706 386.451 li
199.706 392.451 li
cp
f
217.706 398.451 mo
220.706 398.451 li
220.706 383.451 li
205.706 383.451 li
205.706 401.451 li
202.706 401.451 li
202.706 395.451 li
199.706 395.451 li
199.706 404.451 li
208.706 404.451 li
208.706 386.451 li
217.706 386.451 li
217.706 398.451 li
cp
f
229.706 392.451 mo
232.706 392.451 li
232.706 383.451 li
223.706 383.451 li
223.706 401.451 li
214.706 401.451 li
214.706 389.451 li
211.706 389.451 li
211.706 404.451 li
226.706 404.451 li
226.706 386.451 li
229.706 386.451 li
229.706 392.451 li
cp
f
247.706 398.451 mo
250.706 398.451 li
250.706 383.451 li
235.706 383.451 li
235.706 401.451 li
232.706 401.451 li
232.706 395.451 li
229.706 395.451 li
229.706 404.451 li
238.706 404.451 li
238.706 386.451 li
247.706 386.451 li
247.706 398.451 li
cp
f
259.706 392.451 mo
262.706 392.451 li
262.706 383.451 li
253.706 383.451 li
253.706 401.451 li
244.706 401.451 li
244.706 389.451 li
241.706 389.451 li
241.706 404.451 li
256.706 404.451 li
256.706 386.451 li
259.706 386.451 li
259.706 392.451 li
cp
f
277.706 398.451 mo
280.706 398.451 li
280.706 383.451 li
265.706 383.451 li
265.706 401.451 li
262.706 401.451 li
262.706 395.451 li
259.706 395.451 li
259.706 404.451 li
268.706 404.451 li
268.706 386.451 li
277.706 386.451 li
277.706 398.451 li
cp
f
289.706 392.451 mo
292.706 392.451 li
292.706 383.451 li
283.706 383.451 li
283.706 401.451 li
274.706 401.451 li
274.706 389.451 li
271.706 389.451 li
271.706 404.451 li
286.706 404.451 li
286.706 386.451 li
289.706 386.451 li
289.706 392.451 li
cp
f
307.706 398.451 mo
310.706 398.451 li
310.706 383.451 li
295.706 383.451 li
295.706 401.451 li
292.706 401.451 li
292.706 395.451 li
289.706 395.451 li
289.706 404.451 li
298.706 404.451 li
298.706 386.451 li
307.706 386.451 li
307.706 398.451 li
cp
f
319.706 392.451 mo
322.706 392.451 li
322.706 383.451 li
313.706 383.451 li
313.706 401.451 li
304.706 401.451 li
304.706 389.451 li
301.706 389.451 li
301.706 404.451 li
316.706 404.451 li
316.706 386.451 li
319.706 386.451 li
319.706 392.451 li
cp
f
337.706 398.451 mo
340.706 398.451 li
340.706 383.451 li
325.706 383.451 li
325.706 401.451 li
322.706 401.451 li
322.706 395.451 li
319.706 395.451 li
319.706 404.451 li
328.706 404.451 li
328.706 386.451 li
337.706 386.451 li
337.706 398.451 li
cp
f
349.706 392.451 mo
352.706 392.451 li
352.706 383.451 li
343.706 383.451 li
343.706 401.451 li
334.706 401.451 li
334.706 389.451 li
331.706 389.451 li
331.706 404.451 li
346.706 404.451 li
346.706 386.451 li
349.706 386.451 li
349.706 392.451 li
cp
f
367.706 398.451 mo
370.706 398.451 li
370.706 383.451 li
355.706 383.451 li
355.706 401.451 li
352.706 401.451 li
352.706 395.451 li
349.706 395.451 li
349.706 404.451 li
358.706 404.451 li
358.706 386.451 li
367.706 386.451 li
367.706 398.451 li
cp
f
379.706 392.451 mo
382.706 392.451 li
382.706 383.451 li
373.706 383.451 li
373.706 401.451 li
364.706 401.451 li
364.706 389.451 li
361.706 389.451 li
361.706 404.451 li
376.706 404.451 li
376.706 386.451 li
379.706 386.451 li
379.706 392.451 li
cp
f
397.706 398.451 mo
400.706 398.451 li
400.706 383.451 li
390 383.451 li
385.706 383.451 li
385.706 401.451 li
382.706 401.451 li
382.706 395.451 li
379.706 395.451 li
379.706 404.451 li
388.706 404.451 li
388.706 386.451 li
390 386.451 li
397.706 386.451 li
397.706 398.451 li
cp
f
409.706 392.451 mo
412.706 392.451 li
412.706 383.451 li
403.706 383.451 li
403.706 401.451 li
394.706 401.451 li
394.706 389.451 li
391.706 389.451 li
391.706 404.451 li
406.706 404.451 li
406.706 386.451 li
409.706 386.451 li
409.706 392.451 li
cp
f
427.706 398.451 mo
430.706 398.451 li
430.706 383.451 li
415.706 383.451 li
415.706 401.451 li
412.706 401.451 li
412.706 395.451 li
409.706 395.451 li
409.706 404.451 li
418.706 404.451 li
418.706 386.451 li
427.706 386.451 li
427.706 398.451 li
cp
f
439.706 392.451 mo
442.706 392.451 li
442.706 383.451 li
433.706 383.451 li
433.706 401.451 li
424.706 401.451 li
424.706 389.451 li
421.706 389.451 li
421.706 404.451 li
436.706 404.451 li
436.706 386.451 li
439.706 386.451 li
439.706 392.451 li
cp
f
457.706 398.451 mo
460.706 398.451 li
460.706 383.451 li
445.706 383.451 li
445.706 401.451 li
442.706 401.451 li
442.706 395.451 li
439.706 395.451 li
439.706 404.451 li
448.706 404.451 li
448.706 386.451 li
457.706 386.451 li
457.706 398.451 li
cp
f
469.706 392.451 mo
472.706 392.451 li
472.706 383.451 li
463.706 383.451 li
463.706 401.451 li
454.706 401.451 li
454.706 389.451 li
451.706 389.451 li
451.706 404.451 li
466.706 404.451 li
466.706 386.451 li
469.706 386.451 li
469.706 392.451 li
cp
f
487.706 398.451 mo
490.706 398.451 li
490.706 383.451 li
475.706 383.451 li
475.706 401.451 li
472.706 401.451 li
472.706 395.451 li
469.706 395.451 li
469.706 404.451 li
478.706 404.451 li
478.706 386.451 li
487.706 386.451 li
487.706 398.451 li
cp
f
499.706 392.451 mo
502.706 392.451 li
502.706 383.451 li
493.706 383.451 li
493.706 401.451 li
484.706 401.451 li
484.706 389.451 li
481.706 389.451 li
481.706 404.451 li
496.706 404.451 li
496.706 386.451 li
499.706 386.451 li
499.706 392.451 li
cp
f
517.706 398.451 mo
520.706 398.451 li
520.706 383.451 li
505.706 383.451 li
505.706 401.451 li
502.706 401.451 li
502.706 395.451 li
499.706 395.451 li
499.706 404.451 li
508.706 404.451 li
508.706 386.451 li
517.706 386.451 li
517.706 398.451 li
cp
f
529.706 392.451 mo
532.706 392.451 li
532.706 383.451 li
523.706 383.451 li
523.706 401.451 li
514.706 401.451 li
514.706 389.451 li
511.706 389.451 li
511.706 404.451 li
526.706 404.451 li
526.706 386.451 li
529.706 386.451 li
529.706 392.451 li
cp
f
547.706 398.451 mo
550.706 398.451 li
550.706 383.451 li
535.706 383.451 li
535.706 401.451 li
532.706 401.451 li
532.706 395.451 li
529.706 395.451 li
529.706 404.451 li
538.706 404.451 li
538.706 386.451 li
547.706 386.451 li
547.706 398.451 li
cp
f
559.706 392.451 mo
562.706 392.451 li
562.706 383.451 li
553.706 383.451 li
553.706 401.451 li
544.706 401.451 li
544.706 389.451 li
541.706 389.451 li
541.706 404.451 li
556.706 404.451 li
556.706 386.451 li
559.706 386.451 li
559.706 392.451 li
cp
f
565.706 383.451 mo
565.706 401.451 li
562.706 401.451 li
562.706 395.451 li
559.706 395.451 li
559.706 404.451 li
568.706 404.451 li
568.706 386.451 li
570 386.451 li
570 383.451 li
565.706 383.451 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.0.1
%%For: (Max) ()
%%Title: (2006.m40.i030.n018.S.c15.114274987 Greek frame borders. Vector set.eps)
%%CreationDate: 6/30/2020 12:15 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB7&XZdcgYBca3WPS1t3u#98RY2R]m,3=6<?,7l3Gm-KN%\)43'#m:H:ZTGLD%qj25TMhc$X".8\>0G)DX4o$?NCqFk/)grY
%U+[dJN)/M&+7nY;bKG[\L#2e3-Xdb%FhQ2E[]H4[DT=?XC:,;#p^aLc44,Ns8+YR%VJ1JQ`D!C9K4gomnMt0JHHL!Q[>n#i1Bbc`
%PD:gGn.[^0^Bn.o:=fN2dlSQe#..,$]f:hY]*'PXZZ^hl=,_=#V0*3InJFO@BNh-)kObW@Da7eE*t*SLi2/0$QaO!LTmce6=R`X1
%n6ltrhcUU9D=Wno*O4Z9A,i6(XO721ImP^c^Q8*f(]NQE]MG4!A?uU/K;/\bitFhjc.NW3mlE_T)AsgG?s^#q9s(0(AoX=X#'SCD
%g_UGUn:5PE<Q20dqa)LIKdE?:Lga<Va]qs+Ct(Y8ol#Ta4lSQQ[?BCPR2KjaElR"P1l9'=1,ep%C[/%FL=(QTP6ajYHoSB'\d;@0
%+&A:CiN.r.o!aU@f3/p&"2\`>?"?=@V_HE0dr%=DrQnF*=M'd'VV]Bu=(IsI:/o*1.*F:H;HRI?*tqZiM.Kh^.^;0+<ZJR,0@oBW
%0\>^nS&<79DIhg-(.@_pAQ4UXK]QY-GYYZCoq5l\qSF_'5)&u)RLUjNs&A/GHe^:_SW;QG#[t:,pk_Z1RIEcX]1t7VEN>,dB]EY4
%"MOoJ?s4<BDZ>=DK-n0(Rhc'M5.0;LUO`mSq8XqtV`\V:0&/R&=l!]$;7?K%@kCli$G%m#1ishQkp(BS^,5u@>+P+_Ws4pTP-4IX
%3ij4D^aG-(C3ld[*H'G_rgSYGoO>jUJN/sCB8'Es^fJg4q!p#=#Sb1!&'%=q^m13Q5<MRkSU\=8&(Umghf"$3PDsLlBf00*;`l]b
%AkfD$[<e&!E9S=sd=A:r-4s,Dgj!QI7(WcS6<Y7;b,5NJ>FrFS3`U,'HDB!X[8&CP,=cJsbY*k6bqtDP95@RfU+b*_[]@-TAXU6_
%8)3S+jM"-%iKKiYpd`#*R7=gFlc'CUJd`Se;pYDUGB@b.7HJGFc5LeRhG[i-$kiX'P<SS:U]57ZlTI,*-b)00^#Y&]Ak)GJGcTGW
%%A(FC*%!%+"rP95MZ4hpm^iZ=4(Asg;,j(JZI+2q_3aI+*PJYG<kX>5VCu$$RQAh9#;atM;LA\`k4W#QO9^h9mZ@g\M1C.^2B#a>
%S:`tO=sreej,<p4#NNGlroYA/r8C%H2a?fs#_'Ggm(8<iHmcZ*8&eV^7rBsYr$*JfP2mj;e]AP=?Y0(8&BSM[R"JHSZ[oeTCJ7i.
%"F(.MAS"WpnHU:[$jT!bQG\23*eFiM`/bk15kKL)dqMtG+ki]$K(qiX+Jp*ppEA<OLsUn_iukLj3QZE7EtR+J%bJ><&<u;>:!ge2
%;8g7FC]3`k#jbIia7qPGFNsH[BgsA"nOOo<LR:VNh#r*EL`q_maQSUUVeRH8\:7q08E_.4<(u+;j'\ru]"5:H[[^RZF<\_e#hXX/
%hR7@sSdY<OEug@kaufMgX\j[hq%R@\9Ued]9UI"'F0ua@7>h_M4+h_q^qX-K2oGf9Q?XOr3"mo]MZd'sclRJA;a*tPQ)9EV0NI1+
%(be_%Iq5R4^0F!kK*I&N1b[:UCT2g.Nk0Dmo:rHor@u"UI&%QoI$bXN;<@dMk4@$)A3N)jHud1:YabZRR.#&(m&tF<@h"-%Pf1+B
%E'"8QL^3i/nUR6[-4&t2+q.[ADUe>=X-WA,UbqAj*?bnMq(""`aS\@4VFX$U(0sDR!SIGGNRp6WhjV@mhWV:d=E.N>'..]5@R"]>
%!"mJ'pE2`$J,XHdbO$Q"L3_2P:HPo=[fbaAYe^!faF+It<"T>b"1')%<E9F4I5(7I=Ae>T3'rF\^)qS1lC_c0RH6reacAhSs76a9
%bMG2037g<]HM^:%l:V`PlB4c!*:AsAQ`UibkLnb3IbkYkRtl.iDmQnX2M]),$f#7\=>9&Y`*r+:0K7>a(ES=br,`.g]*@+^\"T3u
%F@SS#d2hFtp0S=/rqC#^s-71gk/.:%MI+b]>W-?\HA%,Q=Eh+4MPTe):a>*f,NceJ^Wf*uPl]I@:#oJT=Vl:;;#'c5Ft7C4QI<Bg
%=!SJ[lHA4DCQ.5sT5.?dLRK'ok+!cJQ.`F=JhYOb6O2\lI+QC,@]WkniE8YiHe1E`fdP&U$KFJ3pjlJ9CIl`e#;Z.EF08[?[C7K:
%dFZ&Yq4T-bX$KU\d\*N@#)-:g?4DegRgmMRC[k/<Io;=BA]U)E?/)6Ohqud<.d=,G5AXp=I66p)+3*%9iHNuVEDXatojNU)WMaXn
%k\G(+L(@L=@<L]:qg2sdre^LNP8+7eTf7$o#:[RWi!,"^hJ^Vc2fDGHVcHA:^B]t^%rOZcq,cBg^s*E!Y[nN[*M"OTOF=UF@@UfW
%0M=!g-Bam;1Yq9eDrP,p+*KiZ`\PcD.hd%MIFHECNV2*U@G3jWXl6(g0E<&1A#bBbl:.W(nN`(d3%8mBl0#"uXD6)Jk<p16%g4'(
%Ukl:s<X[McZ-R,6'<NGTK00](J3>>2]u](A&&eC5DA'rDcV;8`]cWl+F4tG>VqW\K4pN[Qh)2m5&I3;R$uK+WNmT;9ZemBug&qq1
%rHV8M!UNAia*g]_UK]r5G-l1ZLiO_99EW1kpc2I\Xf\L)qHI$>'YTlu+oFnDLW\.)@1<"q,grSSV6&;D^DSp+dAT9R<I4X#\m-KZ
%GjZrrQCQKB(%h[?bKWDadI7cd1aXS^@gD3A_J8?fX^eb$OO?XiUu$@Tb;b,6a;AgSqEf@J[E1Tc&*i_T7R9A\cNg\Bd*'/*Gq(aq
%`6;O;-d5N"Gq(aI,g92tGq(`nWLO4B3.n3#LYCRCAod"!#1I@Z>"3k1b>"2JS*+h`>]-.Vc#t]eI&1)n'/?hXbJj*l\s]U6-0tGp
%=I]b=?Qe+n7`<p(GGsgTV1pY]pcW-jm7o+(Il$G>o,\Mb2u9?6.[]%3T'BZpV3?i>%^^,cD.np]Gj;.fDY>2j,qnDUo[d'C9Z`25
%029fTHW-!)[pE+Ggt"P/BYt8EqAGuD-FMXHdX&O[.VhI9=4Bns22acm8Vrpn;).K:/<]%r^/rA<@fu`%LGp,#hV9CS.l-T*S?qWC
%]pZis["muQM=-g9.rI5u*Ne:SWqVQJN'>6CJ]YZq<^Zm9!rJ&&BYjdAfAO9BA*2un&!QSY"ER)a)]@+r!fNYKppE-Omtrj*QI4o,
%]G6,YIbui"[]3qUs#Q?0O(ZKhoe,m[/I),`al[6e"K#DQAhE3A\Q+Z(ZN)$J[@.obW_H<s][4H@Tn/gU%3F;GD-RZcJ-KGnBc+mk
%!?0T^S)(9S8?T@Z::76K]FZktrp_@&Q`9_=VU6OlnBRTb^RG(7o;t5Ul2;Je1.d4lkcK`&1HCZHNd!qhRf)r_UR:N@q,Qr945]-U
%Ng_ELjV,*S1Y1"I^HJZn9`5a!s,E@'6CrjLlDqE9B_^<YR+SWu(V<mTaln$_9a>[D\`QuHPuTU/"%$?GbOiT;R9>aH,%NpsXsP([
%>-2BO^K'@2A5?VPo!Q]ogiuPmnbPk]3-oj)Ao>9\RooM;lm;T32QPbEh.q3+q\R"#1J%bBiE`[ZfJ)uUi?c(('ufsrn+M+\F?P9F
%p3R@cq7HSMhX-q=@kfKoB>tH1(q3#UD<&:CHSO3?0)fM=kR;:1.!Q<(R>D-\&2Wup:)=t;1#c38dEp..DN[e5HWemDpW0/oMgAK?
%qK_qo5;HYcP;(]b;_./.62;1r3Kl(NnMu)Hms_PE5<n<[q<91tFV(J)LePL+nkb(0)7*Z$TK*NUn$<U's5LpI-Y_W#psSNN8)0MM
%qrW_Oe#qtB?7)5bo0,:$5A%ogGp2<OC]1VSRqX^$c,4.#85>'jQBsb(0%<HI<\qL+5K8C7K9Fs9=rp+t@SVe+&#.d_]_GWFWf:Ju
%A_"K\cm*4fU8+QK,iWl[Zr5$0(uMtS9cnLe'';Jg8m]e1U0*U'UL?$mE!F'Th>L^``;jg]aHIgk6aYbucft@lORY>bKD:WSP49ZH
%"oKd>QfSI02^qYI*d:hT%FasX-/"f-At_)@\gMpZpg#->!XH&cPke(=WCYBn?YLmF(Lh!QHniN#;*;*ll4mgC'4jXVU3J]FCBh8B
%I,Q^_I_i]G?HgBi\=OSqMrGneS<:K5s"f[W#54c*^X?F&0>u*/U<NA+r"n5P9C>5Wrs/7lGVUIAn"&Tf;5Q4FT'o+9)Z/ZR(XoPP
%?Ze"onLNuqnNtI$B`5,>V4#:c24f'g'38V+]U\B,o/uF0RWDs3:>D3W7f:h79QC8ClMSM4qDgje;gJA]'r"k'?X>42ZZ=L?=$%E!
%GG"^f;8`6OVp*BPg<\D/Bl;Nb9YoMec0a6?Y0DW*9==gU&(ft&g,,9V*JJTQe`Kp"kH*B"=ITP2F/q4.C1"r[\Q=HU-a:<JD,]G&
%$NBFUlqAu2cIM.AeOZ:4ObYBQX3k13#%U26I%lDPLm7*2:E'pP\<Dfk^c5ka^N;8IC-S;>n_8R-+m;/jaO;]o5GM*(b=6">[jhW+
%68`nfPON[EK*um$r,4OaA=CidR\*5/flLlAk#j+6Q]ii[LS7D!XO!F.r$7LU3XMXZf<);ms"@,6R>bSDZ!/4.@n$0^n\K]Zn/MA_
%JfDG]o8_#T16A+gnR^E@UTa?a_Z(b+S]q(<:ELLIR8*V9aSB2u`]q`7R!.R542>4-e1qud@FP7>]N&lRD90W@]&W/,^U.X;1^%fR
%\s]o,*i`X+0*51DTR;$Y@GEc6!?1_>VDK?-(q2+U5_CcH1lUJF!"J:rfW(qFN`sWi<9nkNM^OoY0BkKLR406RRgrg'&l*H_(F"<k
%\+;QWk&:+@f7/;)qX6($P&J)640<,h$a9TU^Ip=hs.*Q34^\40bFJD)msP*.Is1dW7$"hZbV<<C,K]bMn!$jHVS',j?h9hlq9IT>
%Il_WA.U"in8"gH$:J/]Wkb`'Bs-tppW)Pj/&1Z\URi\LIIUHUc[teqW.$qP_4`3,"j_8ro%I]mU=Oc9FP]p>CaJ6C?jWODagV.Cr
%['lKP+fFChU9FQNfXsO/YE7!ZAA?#jcT`4-bnW!0J`+172D:9mc?s3(daIg.(.=#U(-#cu@VpNL/5u"R[Ihn5e^>@Gf<sf7ZUrek
%`BuXaqqJ&n46+&R3+*sNbXkC"jFJ<,KI`,V1DfJ4b;9NXA@*5]ne9iKP+[Y$`ca9s.J@/.^2ddr?@8.*i^:>W(ElmsrO+Wi-FA<k
%60`:/J"i\3rfO0\.snYF^RC6qr"O_\8*5MlH/W=@GaT@Sk(T.IiFQ>?q(64<$Pd"71(,\HfMrbdJ!h*ZVDn[K(LDQfn1m#9rcRr1
%9MGO:B.#et>s\=d*.I0'&mt:DM6HLtm;FWq:!tfAp0eV@%LAHq_^<%C0L'A_.eZ8*rF$@HmE6;Qp9Y.p3sMV?5FP%hWu5F5m;qGM
%`<L25S`BVnVWi&[?f<7WmriI6(M=rDRN^QJ5Cr'7S\Xk2I%?nD1d?D&;IUP=5Nf%Mane4$8Bq1W+[oc(XaCXlCX(bZT:1jLk$Mcq
%n=dqO33+j>e`X-XM3\qr4FD"2+AK=k9YL,)b2p(g6#C<"-''Bueo^nMd.kAC"8ii#Ia)D2g,S[CQU,5=.J!sb(,@^I@$X$Dd-jHG
%doJ:EDc6Rpjh24(e\,gPl6/o[S::/o5N;DZABtp_1;o%k7*nU)42LF<)\HBhOh^%$N2al$Uj3tjL2r`NY@AtfTT7ubL3XeLC,=[K
%e+n80@p[3C2U9P4)"Tf.N79R9=70an2C-O'jfbo6>l;QF?RA-nLVh?\*!4TnEZLoR**4L-82Uu4Dj[-Q2]fc+'QIGS\7p'NB>oo)
%bnF)pj@Ks&KKU;j;pa6EWhmIQog[>%^,(F,.GDor%Aq`>[1"^l3RHqQV6/AIe67e+$.&3qL?8^MrFW+piEIlSbDSBcVVLm3>?9QQ
%4A!mH7EO.Dph>3FdobI#_7<?JJtgp_p??dlPr-&2cd*RMoXbGpq/37[2*l1nZRG#d$D$n/H[b18(]J@ef%-IAa_P32ohrm+8fPK,
%&Mm'!^A?.6H/*c.o2>:hD>NfIKN#VHb6nV`Hc&ni1iH][T8dTuLV5](=H$n,DDf0"=jHUlC@RLH:M2eVo4IUVg"_'OcodeeB63Z\
%mRq,4*dmiIS""&3o5&<9c&Ek/94r;e:5kRVCsE,_1RcPdhQ9fLFDd\qc-s4K3qkk,cA>mWSb#7n/>[F>Q;srl1b\Q:T$'hs/f/!3
%5W7ebLp*AqIC1_$GfUBW#;St:n+QMXrJZ+.DW]91R%KF"5?D:uc]sk?EF6b2rL*gD-;uTS+`X0ILlN0CX]X?K;39>XMFQc!`)F(J
%h>(K*WMJ3lPEJ"g?c&BP4n;.iXJeu'"`G`qa=AL4h<TI!o&`.u^h;rISb&\QK/P_l2#an!gR%qH*gN1!;=bJ-$t)k'd(WRE]rQ)*
%*s<+&AEDXc%6lNqqE/`Arn(i<C65X'HcbZ0T9p=8*d0-C]</A>e@c4N+Sn3OrE!NSrf$0epa,ANVZ#KZSZoa3h:)?]l<R2$JN_4K
%0imjaJ<FfeQ,dpS$[5Jo&Jm9T1O4FNplmIg\&il!OPT]&"!L,VA%VN(N97j#gbY!"VE-L-W=R\-9Q]29fQIQ#M.leb,86iuK9LCH
%S,B=$2>!LbYlDd,.%1B0^G..*a$d[i+?<Y]B0%I;aj7"`\W?]0L&Bi<:O2fUD:Ulf1#'Zb&!!jU7D<LM'JD*rN'"sjJ-LJ6Bc+<<
%@=SPjWj@<231L!ffL_RhYHtuDCDi[X?2*tWL7.Uph@%i^miP9!PLYVs.HK8E:9d*SG3A(CL:MAq%N;5#3I8/5F2'[J\^oOpIKeUg
%M\Y=K`s/G!kkRA2IWkMV>=UE3'(N@n_>WWO,."d%qk_UbqNB``qoYh\c4;7j;G5=3)#MXX?TlKn4<m)(W1&>u$eBdl?.T*>h>Udu
%f.;6N\d$E)3:paIX9<g>kN!l)VV=dlXaol@*qAdthh[bt%aFnh)546Q84LZfO?3'4AGj.kdmV8;qiBThSYYu*n0&H0&Yr.7W-u4I
%FoOjRAmg`(QP,CYr,4Z6qb&K)bQ)RYhB]=3^/mI]n[+c_*o8662(b9mJGLcV<g:"]ZJJ1kXl!+%RDhU'cKCnLhpDe.Ic\!:3.O.@
%DNdA6XV+^8gF-CPU_sK^5/oMtZe5qsK@pqpG&GN98]kKUh&JaZ*.0%lhpNG1ZBm3n9VK]1>Z<NP6/%[+If/i]/Mg9!TN"WDP+J"(
%7WF3"H&J-R4N$umniGZ;q0TPPrh^;*j@>;tUM6$>:,Y_XO!,+&LnNp0X-&*:a;I>g)]mHY7`0Z;cTb0ojIS^,A^)k*I7Cq"!s=FH
%XFfku[CYb*mmLr)'tr]jCR&:dTAB.e]5c(PN='eF2JV*SbY=_nCNdS/Pc8d`8"^'6+`,'p5i1cAX!?>>*m]G^lE/'/"+F5>(2]i@
%]RA[TP9'PQ^]Us'raVJ-a8->9RfQmKSmYsKi:R"9<rHe,No:RjZ-T6Hg&356+5GhOP5j9d5,Rfkp,nAkF;ui%rm*:Z5M)N75MI[$
%(N";8GTM2NXPn0:qVE>rBG/qb5oV\#.Z^74VkBj(@ciVqe'r_8N:.2TEd#[cT,S4_([tL.(0$]SHnR%m.]Wp;#6Q[TTe`\lb4^HH
%;1-=8E-LmUYE%Pm/&8m:<;949pQ(9:oI&G,5[sr1P[H1U5<]to\)gG+10e@<5!N2pe3USn+ka`YN-t$l!a98]>,4Uu1PKApr/J$A
%GiR+7ZGfZs[<>9i@C'm!T.u>,heU3b5C<$3L[cD#J$C$6DBKna:K;="ISPVQ5js6Y]]TMgq1g.%5(VM5rMUM`':\iJDI5+$*S5p,
%k_)t&efh:lBH<J%jl]>CJ7=M)"-F)o>[c$9gZ*np5jj=Ds&CkiW0_MO_".)PdG4<ag.J.=r(Ut7[lt8_!#]^&>3>(/VEK/ao2F2D
%)P78IJ7i')Rf;QN<+I6alGcd7=>1Zg$,=f1:BN5j9MY&H&o'N?l:1f=6LjLljhlUoq:XM%(g'].U`!Ju4`Nd_H(trHk1qR2mW8^s
%dTPqF4'$b:bhm=Rd7@KZE"IFGkb32lr@ddip\@"`s*?e799n8nmo(@d1LS>ZVG[7PAmBr3FRqiNbRZ,qoEAn`LAj-)-Vp-QISQ<?
%cU!a\\3:0]H.kSkM#2;33Z5_oBd$%`5GdSmpBYI4;aM(`R[@Z76r1Ya5Zj/rbFPu*;>Ij3:'U=hTrEkkLhWZ=J+BT-km/HJZVACu
%l?YrN6#?3%#,D1`_(:o=!f8:mF(#T:Fu7IL^2-G\l`G*:0<bE+nKggt7k5FRd;_hf/+EsbO#WSO.Pl(HnP*f^N5'^L\j+S87^qft
%d+al>[7bJPd?1SXAK?TA\kQ)omH>"m7E<dF\WTIkD^(rjeT[asX1etDh9fHHhkZ4olGn@,B*KD;lZS`Qc=[Zm6BAMJ"3bG<8lr(W
%^9#lO2XMl<S]"3-0;0_"\QJIK:bg7+\!pErhZSXIVVu4!1QJ2@[VV&lR&Ep3#WkFH:A7Jb<#TYXY-i%n^.6YdBX_LEVP"__La"MG
%aB!^mX&H70<lmiq'B*GLX^8j';q+E4IqMUjZ%IBkRT^)+ncpG8jD4Jp^lE9Z7M%S2;oX%)q$R'<rtO'J`(uNmUb`*Vii%sb!!1M/
%3fH<OV%g*HjVmZVQ>6r1=L18'.kSprD%<`6CMHR?QF9ZZR[Qm(#:2-D2;J<oGk2!S+SY8pgHI<nJnA?Qc*#af2_DO1ZIK]?q7Nc%
%L%&[GDn7sGW\D/-:Ubm!dqIsZG,Jp%qG-E`-p?eUEk6OpF[.%BHbG\>[)q^_*jLKiZ&5!,7UuMRNKM9J&%d"d(+Y'+Y^7$g/XfFW
%:"-?M=*b7P"7D1WT&_(oCNKt,b_jsmJN.C.3acj_kl]*lkJ0j>Qa<elO%W*+NEI)p;hqp\VB:=l4ei$Mrmg7;pHaPS8A$[mnaUH.
%knn)M*)i>ee$-RNXX4hV*O=e@((<=Q,"=!Q%CuXi!)_4dGm>Gb;Da@[-kM\%rW:?G!$fM+%rf(gMu^=FnbX%QZ4AYC#2dimepGi_
%Z%=MT]HkSl:ua..)/\VA*+-8AdCt=`<4#gT]elHZhr^og)8,FB0a"4@D>d6X7LaU\_gMjHlplSqY>uh5QkHX%'phsbY(gq#TTH:a
%DNQ79O&=XhUKIRLe:rWq(lrW;1X/^a"$;9]nQcRpXuTb)G>[p6[gr)6>(dp)i-OFG<Cf'kQHuDUT2"r+!fHZT,LKPig7,ZN@rn=Z
%lT]-VbY#_8e2>/dME45"2_4Q)\:?VUQ-8-(>6f-p.dU!goDJ'KWb\_?)kWkX`NUL&hoc$!(i&Ab1Gjt]dU<)2iZB:/<!jY4]T95W
%b1SqNGHBps6YM+.2EGB"k@:;Ko#p+s`DQ6T.YZ!A[fJ-E'!2R3XD50BrW)>hAf0>/nK.Xj@MD$,'9/_B10"a(,:BAA$G3?!,NTAR
%8p#4N,75!A"EPY>Jm_S1qh=5En6eH,A!gFUr66a$e[l*Si!_g`6P>IqZr['63G@Uk%3=KL=9SfobU4$2[1)OSg1R^#[_b1G=s2Q+
%5*c;O!SAD2<dcN(2QA:e(eG5,O=lfGBZ/XGdme+25?)5=']2%Z"VDf(:t\?6A-_\R&(LcEg;RNrrM^L<>WY89_aTo'J<t7RYgK1Q
%\mjVq9pHZgE4]?LE+gX%%UU@fr('3feRb1@^-%;IQ$:N/jN4/n>Fta,o&$kpI/t0<.Y*/h1gMDa&#@0UZdob8)<0_?YOKGrBRqMA
%2_>N_m9o6ijJ$?(HUSBUXP"c#Dn<("(c0V:f\Q2ddO-5917PDOeW6=m9f^16EI3(XouTVo,HE^39noG:+d%!cViS'tm4_#r%IfdX
%$NkRS[p4R`9Z#uq2R4O2@9"3.n;KEll!R&7%[%^q+mB*s.-"72W.%8]'b"OjbD,ht\.cVRl-!4s'?Br.QjcY+h:gg2(j%dU%u(H)
%d4m\q_0Te(onfM7>KC7jV00F0qJl#U'3iZG]K5Z&IFMH:/ouM1$9544nK)1'X_+j$+\%A%[T:p$1[A%,HMd;]f6UlsascN*k)!(<
%)B[!:4%uu&P2Ed,V'#$BTPG"CTBO2US1*W=UXBu^JK!A*-Xdm\]_3^-N7BJ%SQT`8*5m6hA6`SD8IBHGG2-V:Y3$Lf;:5G]\%>?I
%o98Y4p;m90U-7"\bGL9=JHW[r@=H,j==FR15SuCocp/He7\fM$]TT/7h+$oZo1bA6P08V9:+up:\A;]<lJT8&nUX"jaBg^j4(r=S
%N/2mcUL[I"5HNtqV_V@2MmhhJA?Fj>0n5iLesFVCI_IW7R$Z\/ajPa@n;H+mfu:c)5V[3d;Jr.ZqAq;Mjg)C%0"VrKQOQtI&NPaA
%b336Ql"(;/TD``f``:2M[[hhG+=%eGH"-B&<X*%9&Vk_g[(25FC]J,GHkA3]dtR*9s(Ji32kNcE^Ui=,qUJQ;d3+-=qn9Rb'1_lf
%dEJl5aR9tnlTEeGRb(QDOseg>)#?%q;RK\2lU+qToQG^:>SG+3I9jo4J*CQGDjC!EGqN\gV7C7lSk^eF68.=Z5Md.Kc;s@cgXeNf
%>M@?A&\i?%MX@k_lIAG%iBKs12qD$iL)+Y[8XG3(BecoCH*DW>lpWZ?X!deHDGa.T\J&PB'nf#1Bd[4#Pmq>>J*SPr^;%A/D""io
%\P;:"Ik0Pt3ESeB=QT$7ZbJ*U\[\oN>>0^fX-ImWAP0GYTq"Y*8*%:7:?(q$-JX;5U3/!8Ni$lgC2d6Xm%tE4dWOp,>ePl0&nU4(
%0XA)4=Y7fukP#M7Houd6^/m7"jDf[]Q?q>I[);QE@Uls<>!"-tTc5aoWL)eSDPI&R/]Z(`o-R@q<BK`NI)c`@aNI2MaCa<&\+`q,
%BgXT<G5S?1AAPI7[m[flp;]MBlV]PU>&;POgh<N:FJHRQ"cLKsGeOrs$I;r2d:IbQ(d$Pu$1>i802ll(]=rW7Zrl-6(:>([14mVg
%VFnI4R8$Cn)+uUpj6<KV1RIi:6`o962k%jj]HI<,rN2hE&)Bc\=-*7+7WGgWgc='APj8iAL+I8ObC$Zs9XDQ=K^CX"9H:ID@-6NM
%?,#Hh;T+B0C;=BRA7mL$TuThe>Gj=5AsW2Ol0ZIUjG#/DM^XGS]sP:"a/u8tp/U?@_A*h.8\;ToAKY\g>$j\+ge68IGlssZ2c^;W
%+^7488f<A3>WbSoC>16fJ+0Uph+2eNM6oTGTGsc4O;>o+E&Y1As4Y1^*`N"37e28A`nbZLOPh')\@\6ci"CC%*P8$2SaEQ-lff)A
%AoGW7hH<No\cJnb;/Z`$r?8C\3u<^L$NqgQ@u4hRh$Ld.-V/I0CGD8R]ET&2c/Z:/VQDJiUr)6hp0ls+2k$oc443CmnKaRdGSG_-
%r-5gZ&!cRG2_TO6hCMO_*K\jM>/)r6%(?]eVVPF4E\:K=;[Vo,J`,tUehuP%[LCt;T@r.&9Xm)TmC-9L9-J=r]goT.Ldk#=%^'^Q
%A!ZsJ4I^u!];OMR.`u"4$G+mtmW@&Y$'U?'7q)W#3a`BMd&p?Pp:'U`KkUIadsXHM6elcX]u0f<Q60O\ZtXGe,<@qeh$[4YXfXD^
%nZ$\NQRjiFlNt8Tg0jR>c;nj/F@LT*OZA4]+0e5r[R2\s<8$;N,5j!,[M>H?<H<$Nj65/plm*<!+"7VF>UZH.V>;dKUa,YR&2U/R
%l[Ikl-aRk143TAG$k39LJT9mdM1aNf%XjmdUTrdGEobr#5Mfh],5g0Y*&JH=WZ'Y*:5@tB.h.>Cgh7W>0qG$8//MD^+84sQdN^8b
%d-6Gg$JA!ikNM?Tl*^'^2N<L(bF/$Uc?#s+c+P)C2N=98'Q'MUH725R-WXgY.\G9i8`fjS]%IQKabS`31m8m0.@45#+ud=4Y*pom
%hH$-fLn^7T2:F)MWu8.,40-a:ZaoMD44atY'Wqf67<La54hf/uTGs4dG7^A?oCC%,4S+kO#@,@H8tm;2I2[&2(TGo*^gAC@J,sQO
%TNYf5kcQ-3Leo&[4Kc`V_6"b\ac1[f#:B$>)H?WH.Ccu7n`4RE\$=hH)od.0M=Vra5&kst(eSWm`;mGAW2ZjW.";/+IlV*^0k'.p
%I:#i_A^=Hpp9+gmEq]"`Jh9)j7emf!;N_D=4iQ*,G\/%Im=M.?4,dL%m'.LFn\#u[(V1K3LnYM!?H1>Y`lXG*;T`R\F1f+P*q/b5
%7p(^.(#9@rA20=Yi1BD+8OV6$$]Xoe8bDk:+kCAB+kdBK37u6"DtprX-aj9f%OXoh6jA4l5XSC0(o3DEN5NL=as1_\[+=]#ZnX[9
%39X5QP"TH9YfY\YKT_,!n1GkpY<SKj)+R1EZ;K:9mnH-/9PL]"D)X>#%dnee?dHq5iWO?Z`!lJRc<%c#63s!Z_&:oLFS.:Y;n]=E
%qLa<9"rY!69(5#T$QV)"eYA&rg:t!@D5;E$O:=V'o]YS`bHU']e;Ts%*D.j0+D4/eqG\^1fr00:;H`4\2iTmdPkLt#1>'V'i,I]S
%B?Au'?6.np(!n6c"0C>G$SOfcabYsRRB><WZTU*27Fe7^7HTc?lZKdEKD88VaK2-Bi*>soh]68;$#r*KrAe:34L$8N]@R-&jb9M7
%JMZkTZCj^g/7!tQ@*W,)gC^I57eEE[3JN(U\2iV7UA:kM7V\Q,CXC>Bo"d+UMmt+E,*qZmnoj</P@*5)@^>u@o'5AanSOsG=,c*q
%'Sb'b2]`;_jpa/G!O!Jb-#]jl$-dH`>(r=tE'H8:P.0j7W@2+X3[._D+A"k^5!V&aFi;ACcph//*:LQImVZL[HM!qo]8Yl5l$>+P
%fj#K/CSpgUjee5_>Qjof)=8SqT7;cj`FE$`g"9/'I:-q89uZ=4OB,Ec,&\2L0;A$Td7*&n[Jhq]JZ*hgR#W4pT48:HO6ptuG0iG%
%>BW]-O^d7k+2Y_@,5cFqnSql$64PBN^t*&lnkhVHPgA*p9d=uq+a*?-:4mPX>Ia\m>8it\5r\4JW@t2@*)4@iU1^IDlh,>SGa11r
%b4Xj'KYHb'9Zuj^/74Vm**oKb2VA[[c@"t;K`Z,#p9bMDBt[S-fM,=3JN_`)3PYFm!Sl@C]GeGBD]65L&Y!-[;`0Z:e3NlJWID:7
%2U0L%llfd<oZAgrPp&M+hj.-k8B0a2/%\d9qg+>e1bnOaV[%jbJSV3!9g=X?8Yoh[j`sp%*8J\JaP)gt_]9"1_sO&m!tRaZN%Ja8
%VrO-87/8T_!*21Hhu]`#<CN(rU.\=^&UW5<WK#@[3VE$S^6hMN\hDjE>#u[Uf\T`a]N=0'jsYDEh$7\4l_enLTR49j4[71sV%S?B
%F/(D[ed<YR\qM]!3A*/cRIkH<K"J',DrT:PIjDONnGMXof4,ZM(d<u1:4a&PB?P_bNF5cK.9>JPr;@SJJcQN6eP-6rasg*\?,&"D
%8`>K^Is'@d!-RR-ib%sJ\9Fd_3BcHbrN5,7"\:AKrkZV#U:Gp)/+@/K`U.%/<Pf!XKUoM'Vk`18aUPUkHe!;+E*>C0'+<VYC!]>`
%SU>=\L&J-seZc*Q`eiip<k4]JNTMn%>Nd5>19$%W*en_QlIkI];?te%b`l*K-T>iP2=IKK]/>XabRYC25LsA"PG0RaJtV9j<FaWO
%:lQtRd&B:]ge&m24"e$iqmcX>8Is>O=1]?:)TOVZ<ALDlRpG9WRg<Ac6Mlnof36L5je[Z1,ApQr5m0R"2p4a.hJDR@;nAuI<qW@,
%SC4i/\q@q]D,.9Y7.gC^XF@U9DJ^L93>H"9?2b>2qkBViY"N>m$gUG-$C%p)pnmCJY2>2?nmS5t+1XtRS"fVGVYFm,ld4k7[l83$
%6diKfTA-<g)Pltq,4P)>/"noJ1*jl$(,NfO_RRO(ra__[^O0U)o&0?;QBKQfj"XEV-a5k+gosPb;/ngHT.FU!^eb_V=#2AM26a7K
%K&#3F]o(r.ql#Qjkl("[fCiDl[2[@sCd(=I-`%5V^KsFe\=t&0T6<+YDDLMh[QIflT!t_h_nC*&Dfsu[`P;G]=4I++OC-hB;J9+J
%m,?KL%0JLuS<dN.$`2E*2)'-5/S*:7^Q"i.`Bg,N@V2/[K@&-9Uts,FmJ^-bA`"/6it:,JWiV^plXR1*8u,E9]Y-hG$RHY_DD`0\
%V-5^Jd+F_b/1M(;nRh,XcH]/$1q0`8-VIumA#FQm&'C(qM-f9;hqea^@QSJoS@&#8WF\fXPAUliVt$h$?J$Ydr^Pa&MYDsLnKJnc
%Y.;h>mQW<"_3m"?WO8M7N-b8\lIZ-Cc,_SpgTe,.]G)qF.Z9@>*,1/f&0r.ZrMF6fLolqb$YAdU40Z*iN'b7L/8X0##K(RC2C6,D
%PY4.mY2k,Mi'[)"[8S>^bP+q]cq,!^lYFjAj<Vh(8+ZNks+&2WV0hTAm%Tdt)]<CRS]cdC;KB:7MFSa3G2,l'FYK*5aG[_e,9<sk
%M^J$m=hUc4_Fps?AB("A.-MI(bbYB7`^[ZY[R$LN^Y5aUDsoT(R4)Z*R$A8#kcriVk9q\4/mKIc4:&!ZBXQm8JQC@=&#>[uq@qAA
%UubWBC#;8WG_?5u+B[\@+bR:'qe\`'`IF<`gh&Xqj'/tQl?2:b[$2uheW#+p%iF%>)#^dEV/M?m8[_s*U.]'ECEM((##DAQ6s2Z.
%'8:R==j=Ud[Sp&0Ys<'&6UHDLJ.$ske+i&miqRbFPK%RsGqP=RZK8Jn,^Q`RE:nMd*'o$Pg.=_WA(#Br9VaOeq4/riZN6Ga`sX`*
%iP]_^!=N1#R^BcUc/,>kREdTB^/7Gsf/HgQF"d&,PlhKT?U,_-'N_pEqHACrTQ4@fEgFK6Q\Umrm!75UXek>\[JFjRQqCmbEiJ/t
%!-[L.YO(kc4/&jBG'!l%qJd<S#`Qp:`HW*r45A^'K`e*^6*-=R/2BEi<g%s9Cl>^"YSOiEY-eXuBN*RBq-r%sGD$9q_4fWRh;g=G
%/l9iSCkH"V.Uce7*4;eZlgE9f,F'S'hb+;@<.J<2rgp26+MYF>Q90=N=?^t/5\On<(NLmeH3=i4?R#"H=m@7e['Y=G#bP,+?,F3(
%D-3e1^kN!>Og#7^`kG$q/@T`/G\+)=8Oo+b>2?TD4YF.MZ-^hghb0EmPrD@teCsGDlK0o8g%0tf]O=9NKk?`"Pao*WM:EE,='#C0
%J(T/7WFt,GOD_5sD,&kJ5KcN;h+R1LK+V=EFPUV_+,eZXLo-D_3E]D'7g3OfD(KeJ:J.%od6)US%7RZ_MogQn)#=@g^N0:?e6^Q2
%Z$LB.jg0;sk))b(:2b[=L2.mH:hqZeHq,\JR.<$eno4O:_X[84cUed[qV#,d8Zd*(H;*PB+;KK]gm,GaPkpgMjtrSbA$<)hrC"5=
%hFS]hXefu"2,./DU8Cs=&Q?!AP4gtC+5ueULq#?!._)l2gt#p@V/IT)^A\O)ZWLkr`qcRf@FFlTgI#`7:]k-!0crE(.WeTB:L"nd
%NUO!ohmio*7ut3n!GX`fM.NQ-&&.%8/Q#hg/kV\pc;*ZX$uZW!@m"U-J0XH(3V!m.iJLNPQoBDc_*a;,BMi2\ePb)dj3=NCd-fgU
%":4YJg<G(.E3kWc5'hTLkhAl@IAYDNi'dXT?#G6?H.\?*KsMMtO5mPrA7(+IWTVQ:.(-gik6G)\,bcs#Z#T>h/9pLZ:fW&V2\$>c
%Pl*nSOH3]q.cQ=?ABB-ebctM<a%]9oc'BV`#O[&VV9F2WIet]3c0dM8-ge&o=A>$U2cdU_']W@KZ#4@nj_[2\-h#4BA?Ve#:i`6+
%\J4li/ZOK@$Wo8H+;To2>4t_:^Dq-g'&=s=hE6QIA2TTB252JV;=f?@D/24DLFkkf<l!AL](o6R1C1CIG,+4.0end,I5]2F,Z/QL
%:)b@kB[=%KI@&=h/+XtP^'/9>`#>O6[^r#$DEPr:n17Z0QZU>sJN&$3E7/peerLGt)uTifDYNYYp:9uc$t`:p`lrmm6$?gZ#L%HA
%[4&H.&,.1hg&ltUr"^MelBP>Zo<f'#e[BRf/T$*^?>cR)fepjRcS%0h8,b:(VL]pM=m>4R*$lXM[@E@(6]Li%;:8>mGEkXlCcqto
%TkS&rgU@#7"fofAK5S3p'Ks/<.")]C/Hr2s@X$d&3BQ<n._fu1Q$V;sM@<G4CFGg^L0XO^6SIt%278<WkfU]6HOVg.K;eIohS^uj
%B8K.=G&^pS]5J$#8(uKbIgQCCm;n)C:K"4ubGiC*05lFNl?XnL3!q9qm]Og[;R0EW.$8?QfA)r,XtQk!pRa1%gE*;U5K`k-:SDY_
%+.&TC1G(m:^)>@n<`Dlf7n6eBf:lLH>E>+*\WP1DM9!a`LNS0<\\IC9#,WVL!_"rSJ`_M3247W.a>EcuS\k@@oh(C-N/Ei1h;3-C
%Ijha.D3VCR[;t)T_&hUZg+bL'q!V9]Dh@;o[fj#OC(Q^bqW$lmU^Zo"8-U[S#?YkLB)2J]m;Ki&n4d$B=VE_;[XAI&:<DG6^#=1K
%E?h*^Yu"I=pRY'&;sk;_lsm"..=3Ee^,o_"]]":"mNtD@%TS9CbVljun+EZ0nd;SJW1!$J\7g"j06#CrO6K-YLM,#G[jAXE/EX<X
%qFT<*(emqi%_Z`WiGM*!hk088fq[3+s)rUQ:McUCW`poh\[<*oPtr/Or77k)hn!Ft/&L6KAGuBGeOZ5nr2lLFG,n#!rr2e5^H_4N
%nGCg=(]=9?UBN2fLmd>Whu3R@2h#YZFe34(a&39u+h`9)R.+V]*<',<%V#>3!?KQ['bSC_X2h[Lr)d5NQcYS'q?Sa`aCU<3[eB4]
%N$@HRM@mKPP09eEc8X_&g&a1H*EBDKAb["m_+XDu#HQhI#$e5Sf"qRrj=(VS2GWf4,fEj]9tV`='u<:mg@-?*P.M8s[bgNE&hcVo
%Qef,.r1Ur6WYjcrKbh4pe>P&Z8Z_Xu+Ad@=q&:;SZO0Ho=\*C^!t4^g]lcNI)9PG?DscXc1:GKEI'5[[$VQV/P1h7C]DN>12):dd
%0sn`I@!'e'jUu;,KM*lP8!oVnp>YPU=.2darHATQh[MV/J]I:&_J!K=A_C\SHL6^o?$DW=0KY1#37kuZ!lW+[IKZIL*^9\<AiRj>
%&S0;B1YbQ/oEQo\To#?'p([Mb1s@#ZDXT3P(T"g1=E8I[+<t%t=5KO#M;?l\ElGUm5DVHn0<n]V['BXSCW'HjeSk-ijUGF;9gNKi
%L'=\O2mo2KT1RIN&U1/p7Y8aG%#]g#3LJ$d:*k@g>Q"Bec.^Q"GiqgpG0JZ;`84!`.H1*NErBE*N9QZ;;+`<-inM`<E_qk`p[%"g
%GYY]qmDCaL3?)6XWJb?GkA)ae;U=fOC[*Au@mHn51WAIm^ogN,&J\m9r!</E=:h'S+,hMVnj/LWKlDf^_23abpdFK0A9XEG2Fmco
%_Yglm0u/PAMjq\sJ"^uZlLu[/"VBNkh!a,^lJP2LCk`,E*uFj+e!i;rH:2$d_G7WL.(8iP4lR3d8P<LkQEESe&0fP[K""&pjSfno
%_THB,^UTCcoe1=$Jq$o-/RI*j_cjEs28U@.fCmF8Iit/cr9MC-@=Ji?/H<`?e!3/iOF6_V$_`*#ZXW:rR<nS^caIE@cS'I-r-\6:
%nr#$Q7t,/^n]<GjcRlo;J&;*5P]5iI>l()j>=ERQ]mj\V>5%FQ*hE-$Y');or<=55a!0gUJ,Fccfq2M`/br>u[se;8Eq@,>5&2eI
%O27+X1YVE+s)]n2n7Pgu[/[cM2>k#WM;Z-ZDD(lhh:Di1NO=o@h`^F9`o_c\\Wm%gkN7Es,qj02$We-)J*Ei@j=cjC1]FDNFo8W^
%k0RIrgqNTdZg`PGXa'g,mqcru$i[Na?!(p_:)6l>M^o0NeXOa9@!n#<#dp"+(75bPCOp+olHme-p_l.r:ek*D(:GEHLP=PaD0o^+
%Fo/TYY?p9*;GY?M6M`ER/n?"5cPFeu-c3`SH/;Z5ls/WgDAd-O+_iV\4QlXg$\^W`?/A1p$cXJL:g\$&/i9mAQ66r(X-_8o6E[`'
%\0C9>(B[.cH81YJ%Mr:I<`p,<pu%lEf@l/;03dPWrJT:>`Ph#gg#?G#8M+PWCHII-LN?lYs1/kI]NkrI/j?;[KgdSo[2/F-Y.j\R
%*PXp"MiEX>Fg8UmXXl&om?O#=2r^+!i6su7M:jq=>n[+&od0:iq/'j?\ER@X-eQtG6TuDl3XK,N9,AQ7SYbXkjC%4\o.%AJ72G?Y
%asY6[V:nSS]@?0eKU;XA?/3l7]Q/(^=UoUV+^@4])Tu#+)I2,_?.iMD1$.3]61qn%Huck5=O,%IrT2dfcHYpD=aO@*]c,>ilgmbm
%\QLQ9=8X@==BVbkc<%k5p#_,S05RaYZL%P4^(J>9b0#9WFhDa8;erJq=#P5&m`l=M.iMn'.hu@&?YLdg_^jP>i-KOBI2uK#l'jW4
%_UW.@FmFG@@5W4E$*3<s>\Q(mYe.AjD6,TrT=WR:eZs99>chYec`<VjrZ57\e_M8G>.CZjX@]E+=ke4%3bujef$2nTfZ:IJ,IauP
%n=UNJ8k7.MRMfV2[8-(5+g;m6Mh0,t0H6*0RGG[8;`bsYGY>CGfl4&-\2fFR#@8t]EPU5O@lJrt;\@WJ'5t_[nB1^h](DA7>MhLV
%C?pZQP.lCZ@VP/;QN"6t0XZ]/RdkX;hQ`[@K7Q;L0utfpF)^GaTb'o10]h6W7`#R?TA6f*g-U-Hpj/ZfK:R]()7nL'HX;YJE2iKo
%`cfG7hak1S`l;/d]sr(ZR,p8a077f8?Dq.b()m!P.($W+%*=W.1_`*$]+,jNALhjK54G84L[1.#/UUD)FXqZ03#K7l#tlcP1V@(3
%@Q39+X0q9_<G$S,X;tXhL<ZKJ\[c[tDf:@_/de(?Bi3ZEG7U<(cQXBYoBu25BbSE^gjI:/'puD:kVg=c0%QCQ;+iW6Sa7PA<CpFO
%Kl^R2)UL4NS6j+/SRkS!S*Wm&:hA)oF2D6e1<10_\A^?9ZWGrQRh=blS^ejlCF)^C3<"$Ch5lAB\<<GI\[TfB.N_4B)S@<u?MM&*
%ElhtUfFe.^0(&86R>N1>>bBu,Z*;o<#DJ^cGss^(%5%oFlUr6a^KkR^D18H9#&ENF;8&83`.N;^=hNNP$])buKb<3#en&QD4gl^e
%m)u)eMJ_LOr'g$V.[Y"KoVUKJaQj@g,ccJ/ffs`NFF5<?m;b(pe?[ZeFpX_aak=)-I<aCDNoMi[\_Gq$<K,u:=*=%LT2RcK331&"
%Y+"X$ZF[0PkY%TEb4\;8h7,V/6rFDA0OK/3O^#L+Gsm*/JNG!?N_O:^L``G$&rG04<^-&@fd^8LX_r8<k'EM">84R@j0-IG[TZ@C
%CW]"PqlP8?Z4ks(NUQ5:QNB7H>.(m3I'n(/dl\9=h2R'If'Z;-n@3gk]Umu.^,nUmfPMPOQ+^!B?JF3tD*@<X2)EoK/[^_nCGdtl
%J+N#7F$D/GX8BH8AcI4Y?>E%/:QMn3YMC/FAEgN8]rkV,UT^_%'sdSfCJ6n[eml`pVA4H8*A#4!X^VhT_slnO+-1H1h0?*O3Js.2
%#?QbYRr0YuT:ND(7q^e"ipjSu9f-3PEllRk>pC4cecX%;#CeREXOhAhX4OQBeCJ539qCRWb>dH%dm!7k!]pWr89m6e#>VOnK?**5
%ah_18coP^ej7m%,gSu:N<0OqLol[U(hT-f-VPA^XC\mV9(f.oH#HaadQTI@aeJEj.\U=)?W-Y</*j;-j[uYb$T!"),FA2r!Bll+G
%9'\CAo??0jb=le2\t5m-h7oNa=T?pnXq?Saj=^u1j>FC-57Pc#l=j3ihOe,4Ml3KGm>&V_pa!7iQ?ZlKZhoIE`n=S%[[Q<Xg0utR
%pX%/KGFgkYrl9'R>Y/'+k@a)613@SD%SD;1[EU7DZ,aW%(K\cAhF7D8ngLuHY?^3"2D5EJVmAWEmpC;Fk*>l$G!6jJ43L\djhg,*
%nS7SLG(1LB]Z]]7?afN0[4Cc]LV5aJm[d[K=-Bc=JQPZtDQ]b"o&]P8ZFk/4.dn^&Ur17)S$V&,ekMua;S3IQ/BPAXa32?ej#s<q
%q)+pp(TD$?md_;/l`QffAFA,kHi<r2Y<:X-SdN(?JXrP8+hhdJ4ZjFI]8us30Q-6(gcCE/*\Yi\R7AcGb"mU9/O#a$n&eF\]RKYr
%^:[-'Vq5&H\Th$^^''+2pEe[(CG/KXSYEQW/j*foqcDD'h0q8[Fjo%8_U_.6>IZ.gAIGX5_F7<^mGQ9`@]mu4(Tl`)<g#?jYGLh7
%djinOmK:%>`/&__k:WX$nZ@^)J,!%qT3^>rbI-n)?f="/>rg*14BH97b?sAW)dCkZB)S`EeljXmGR/+'kEh<XUN)a=_":XL(=TIt
%LLC(g=\8)3e.o;h]1PKQ>5P_,RG5i)`OtTDH@=bL^0BLPcIM5V>jA8m\u)VgP,mq:UU\G4=;u:j@iZT\f2f;`]A;P8Zc-N7p\`IH
%K)R"Yk"U-S(#Q1Cg-X!/L\95Iq!kBW]Ik;5"3Y7uYU7_H&!+F.m4Jh:X<>$:rcblTbl>"sI-j+7RU's(MUh:.5#p\>%JEZ>5[a#O
%9r+AO"%ljIi$kMLE*R2,ZUt]*h:nbn/cEUbFJBo?E$4d@;*9rEdBR<j8]Y)4d5tH@o\h80.4806.TTbS>u+S[)t^rFp[8iH0SE\$
%CQu3WLZe(bSb:8UrO?,6ELjGU5'[%\)+)'624L4HOo^YC$tK7"Q9Jbun*O'b\<J\Bn^6<2%W2VuIB=<g%/me:`l_@KSpX^7pN<LI
%cTZ$\f@E#3;Jk=cWo!6Q21-(gV_riMFTM'',MtmNZo6e-=2^V-4N"nV2JF$-DU[bQ)ZF/fI8(84T@NGq</SdOBVQ<eB_[MjIEq!g
%p^J<eghWP`o_UZb2H81S#'jETo9gMFmK]=,$9SBhUkdg8nM=f3i,g20:2]8S7XMT@"$,Y`W3()i5XsM[D:J&RADo8slpq;e>\k;&
%cd%1\@,Zh:jHU8;L`XYRD1-N[JV/BE=&/6a&^S@NI<oS`!.+X^o.bP\9<7:@rg?V*U#oQKI;$Qk=g/KNLiT6^R4@@h[I*^dn9Qrk
%a%!toqU)38%<V;pJK&Ymb"j#2r'BKN/aZ'@ItjSD;XHsZdI^*D3N4P57"_.\[p$2lB;Zu#3pH>_F)H>eFJB,1%\k%d-(h+=9[;Q^
%h4Mp6BMO$?YB&G#:5RNb>TbOZM&LOp,\\@2'/5d6oT6^?GauQoMb`FsmlFk1b6/rC[#U`]G3aj:Asf`"28..qCYHc:n?W4J5DX=#
%3EKkuncRbl(cuY(al;B_\9F,-F(1a:m$oK%9D^5s5>FF)lGhp"^qjaA@_L_J"t9>X+)3Z@1.hWREfN.XCY8&]]?`t[5.#->(Ahj2
%`l!e1"m_WoM`PA_LQ1P3F6M`<qk#jFBLmj85$c6N1$;I_10Pb`FpN`Oa/_5pGS9XEM+5&Z0q(rtH:Q-VS>pgp=9`DQcjOjKQm?7]
%AA+0]_3<Il_^,gr<j^Mb$<egPrQnajSif,YP554-a+Oq:`&gT)0_Sd-emJ7W,V%X??G\_^F<C%j_eR14Ojhl3proX+l%"u#N^l^K
%[-n)%RXVal*Au*3Ng.&6hg1oQ]0<khoNB^Ur%KY([K#Lf\1?MorJWCFJ+XWXQ;o$M.6^MFD_[.UbnU0T@uXmnfRPX(+E[]%gSdnW
%?)A:LLlZ"0"#d8O0[G8uffK`c#PsCOi?]Qc^A3eALc.KmN3VPa&rRlUj;Ubb5QAM0'9V/iqO@CJK\d7&DL!d%T*!TlNGkKJmLOna
%7O/%oJTSS7lL5H_)MB'ng`mE^1#5(i*96k*\CCYe8Y>"5;Z^+0G66PR\rP1Ym;NOlZI'$h]M6"&(iS'n:LS>ELsUW4Xj.'[^8<fA
%J*fFdp8>pKH(FjPG5sB2mnb*K*r:Z`a:Fc+@;Pj&m<>?(mRYSG]I<dN%qkX/n^<OP-OC\X9fEJC0-0s?IMTc-i<Sm.`]$%^eZbIC
%f$`isdl%FL)&e:rTgPqZ1A04k3uPgO1h#3)s&e_&9@cKUQG>/(98^MVpt]jhjoc`T0J^[fn3^_Hr.j<8?KOcU5\%j6Cm\4J_&))j
%3NSmA!aEYn#_gh8PS9_#%#&_\^`l_bX.1C2#fm3@XMicl;5#,(iFQBDIZb?iKSj2,&a^rk:7r^qOqe<:<!m&%LA/[W;2,'s!tb!#
%#cjuDp0]jFJ?iUKL!0fD$*/r69s[GoiAgrO'G]k@TmohqB[^3g'mZ*3H&:]uK7$d/Abn+(_B^6lOp+/c[*5R#!QhE05k%EI("sf.
%`c"sV$@'Wu1N\L76"K5i'a;7@"(c&U"UR0J5T,hW-nC'Q8VN"!)*3fYiddpXc5hum1Y<lrLBU/Ta\fo!0AoMX'!r*hM_3)%X!ma&
%"2?+nGC\DK"C,(@kZl8NQsg_d[`]#ZeAl.fG%FuZ**g9G+<OVe#1t;]0Ob@/c2\S1#6U6FYfP`ZZ)SH!=U9UuTJ?e2!f[9r3g9g$
%l%\.^/-2c*71&*^<dPj.0H=(8N+?MRLB-qKf^k,$Y9Lk%(kWsaN0M5C8;%h7#jbP2.*(nYh5DOOOsP]ja^h%eg4G8gkJB!i&]BA@
%!<NuU&?l:mLi%4G9o];'Lr4nF$]D#@_[JYfEeKKp^_d=!1CPFtL!cUD9.I59U`]m&+!J;6#RCIA7@%@@'WUl"ZpB?Xfd'B+FGt_q
%KsO'sbh=1=<!)&Z^=T*t37%0$9G']nG!M5hXJe+RiLpM>=]+-`:biq#7p.-:J_ZKo78PR97#GE5AI6H;,X)WN*4CZlV)U&YE\J\\
%%4\KaeDs.58@hJLAW@0(U_jMqh4=sgNftrD[SaK31'eq0$O[tr&flnQ];-2k<Wk6a)(LUIa/ZM-Sun4P0LNAP9P:"q1(fJ>iklo'
%*9oYH=^lZH"mAY]#pb0(;(Nk$J1N?OnJ5\KOO,+#b<;f&9!SQ\JGTVX])e"hfFZm?JAE_`-Q.Z[(W`4"J2hKl:r4n1"n<#B/qhb`
%R5,:$=':)L%>?8p.%LWs$:Neab+K4eLmK,Me3sGuA/bnI(?oKD.eTIIC*OA2;ipUPci\8cD_tiE>u39pSe)Dt0P5!43"a,96I(3d
%O[U$6(1:$OO^R]e)aVuY5s[ehW_`oP>Sa<6Jggo7KjWKHbS!L6;$]_u;OD#@JMNUHL?\3C'M8uA.Nh_j/s3J.0L7/k=f,4f@R*6o
%'IAuA>D.Pi8LF!3_TX\^2F%Qc8cllD_$0r=0Kq63BNesMWq1fB>(iIUTg1>L;#i6paYnR+`/5%h;e9bZoKeU9pNWoDS-+@lJ8APc
%)F?\51)]uJd8,W6.%o26:`pn5h+4hg<=tLm&r!ii%2GinOSOupeFFUS"jrnc%MaTU<:h76SKCk-_?`ElTQ#>_;5=j6:Q$3=CkPCn
%\of(%Nj&c4%.TK?(_-up!J+UNr!0M2M7)$P#QhDu!_Zf;5f#:82AC+1JJBT?B2s683C@aS(c$n%F9Mk9'NGM"'f61YkWGWo=C<@e
%XM_l]EC=)$"n0@)F3&T4V'$Yh%rqFcm/]J0D6l3`:'KH<Gnuns)%Ai"7I#dGjYt+%?sD.[AD0:7j<_qhn9\snQ"><@ZiPt:^`,m(
%K>=g4XC0(HP`)JK/Ei'E3:+Xu$-1.s]ZK]h$r\$O_97_18=>%F&'tQ9T!Ogj;'34O"$g?b5bc3Dp0`EP69@YPC`>k[prJU&@5^Yi
%6(eS89mbGkC+^Ve+qmVB''^OX0YBZ04g7su0ml6QY7ct`!+006oTO6J:'?XGJPH^Y(kTtOe7S=S1k\Jkl9IX2$&F7s'SKmLJcrq\
%"G(nCP/1P)850ES#*'ZhN$?pZ%#AQ<(h(oF"UU&sNtJ(klp*u`V\gjS%%/7qM7Cq7ithlqP8I&6BbGq!LqPdg^nM3sj0K_/FPGNk
%Wlid+6-1BYVCfY<cA+]S%/OKFRfr0gg);/tBGsjL2iiW9eFB5`,;"M-b(MS//U:Kn5`@@q]`>MP@690`1n(6ZNYqhCFIB&t!h(Tk
%_kV+<H4_k-1(EAK#hQj4gYMr4(J51W`7,t](d^!@"(_UE8H;Aq1A2rkS/l<odULf>#nd]d.#$atg's!rRK83eCb?hSUY=$d0F\^'
%YlP[C)Q62gB_\ej:_;:i<)B5j$sb.t$StcVYnuoe!+fm2!opbF%3!;!Fb1YX,G?^[$kZbbNhdj)aG5l(-4['WADFt%P+#d#-/7B,
%[KmHm:PFK-E@4Qk1Bbb;P;IhU8^Kh.!<7Y5-jb2:`[6f_iGi>#W(g6A?Sp\2+=hChOfBtc%0@,(%<KA)6gj2("Z!gmK_QD&(BXZ&
%GUJ_m0M;Penh_*d6,J/[84TTkd062aE&^)kBh5H6+:'ea!YU?WJ6]DD''&[^=P8EY*"Cj5.S5DO$puR<U#;+\*"H_7asbmhkQT!V
%1t.O0eY#inp7!=%OoRKeR0^$14@tnX3tEYiU,K9NSZ&3L`5d-lj_-#L).h6Q9N2K,mYE*$!70-P>c'[h)ap$lW+<na%C)TXacb!n
%8.n_?!WA3.cCQ5i"#>^!$&tt#^*mA-I)K:4U7F/m;c(ShA#P"7,h\R+T_&8@O_GGcPlhLb!Z_LMK'5*85,.0ETQ]8p?&U8c,6sq$
%O:g\N6sa:B."p>#.i(Z0L(Ft_+[F&X6\q\FFtt_D:U2?QUbr=A7%(,4iDbXG9&+p9_'SaX`'n7BTeQEPXTuq3+9a,[THsge/Hd>u
%:2PTZDA$S%!_*DE$%g&"l;C3mJcQ<'?4XrV&GeMT-S9qOKDe%H-j&*sdN[C6$3bQO.:^ccYmO!6K+o&:W$$%;Oe>SrKn<mPjFbr;
%'XTe)&gbi+fO,so*@n)k@#0Hg<h)&RTa2k5?m90j2a8GE3:Au,abnN%au3'q.*%-ZV'*kUClmq4J;mO,<"oT7=]n0@5Z1re!eHq3
%:8B"g/4d86Vc]qEDSe^IQ2?Ld.6g.17^4&%*!jbNKuhQ73"<P*$25%31:Eiq4U@/TeW0DQLfaJ7U2'Cp[cfGZ8O=8(nebgJBgd;B
%,C#&[^Fc&Z:MUZ)n\G!%Lnk2f,W!rYP!WL]"'f.UU'!SOV6b]?O<bJN8*(C/Fd+CHRS_&G&4tsBL_G"=KL4J:dOH#!_%2BEi*9&>
%5_oPb8YG>k_E9[j0\_7%RAO*9`tN'A>X&4N5V.c>KN(WF(!!fk.[_=YF<54A2H1lo4(_5UnjpCqE<?C7pdo9)WOuVKOTa$S$7mV^
%!`2lcQ?WD$,nQAC2@q(2U`'F[);-h('G0P?m*mJ_2QCSo1n^iUD%kqsYar^dbG=t[P$!J8HJg7j+=<)"eFW>a"pLAn185oc>*KlP
%%n=bO*@7m#72:Yp6rIFT3)VA^IMp]S3&h(rBFmir,i4\oFqf\?+.)?"":<UY,,HK(92HV%OsP^<Af;X(O](2-!!Jfm==U0Z6/i`d
%%`/NIk5n!T:',g[(_NMKUmi':#lA-oh;q25Wc66_0FBP9VucTo'Pci&-OOc^MAT6RC'rOY81'?>Q&$*r'dOtKJE*T28Kt:u`G)]V
%.$@7/8GJfsa*$H_BeZ\7R-4b]PZD?$0`lA6.sY6>+iQSg:F^Z>@d@R3M,(R_n0B-<nZM89Y^!#X6V2;'1rg0tE>V$(p)l,&#pCRC
%-RC14(</qeV%A95iKYn`:.3.Mi;k1E>SALkYXmM:<H;cmW]-=PX;@"]PFrAWL*m*:D.BZ?&D`&uQ?]Gi9bV%UZ7*/sPN2urJ;ac!
%"RUKScE8!>Za*O,#E[apVC5hOBR3#K)*fB]Vo&r+0E>ZkEZ0$t+c=IlA<F\0$B[DQVEl:>]NGkTEhl*XKi!R_=:.n[7!+SpL^6FA
%[)tJp+'*V4)bMl"%!#=1,@J?U-U%*<*S.5*]D_fknIe]IlkaFmFrho*iPr_\n)R\&ncOZ,dVA(ip&rbbR<7MKKS_KPj":=_-"]_$
%9dDTL.g-Djd:+!s$PEoL!%RT!fZT\&M4KT1!U4ZuMEq**66m#0<3_&";lU]hr][r=+PS#D)N"2\$BbLfaY=%3cgg_X`8tE$+gRi%
%a()E*"WpT^k*q%P:)Sj6p''MN'^2@One5+BO[:2k`Q&-sN%%<6PaQ$\$QpS6/h:C*Jas]u[-]=U.#DJj=Dc+O#.m-04"+>EA*mNn
%K2@n65KR@DK2k:3&-cPfP0t!Mm:>&_ZE$6t7b:-U;%nADTg"jR;S%)V+I9:1!k^G]%[>ML4VbUtlOAMON8VLEDi)UYKFS?'P%K@Q
%U?Vq*&d;)C"-QQX]oYZ$!jt[E$>(=PZP"nKnE:.JejP<kSH70]+>Fk+?'Zb$6.&O^hHlh,W.aqcWXKFjq_3D[))>^#WgH^oW$'fH
%!J(jLFWCK-;qY2Za-^;7<2G<`BElA+5nY%<Q"(Lt%&G5hOYIL%fS)V\51F\pC15mC/%0&@*O3YE75n\aaD.2M7],c1P<&of/IX)b
%PN=$J2Mi+/WKM>0N)*'eG1k1/Qc@,A34O%$RVGTp`<<d[Dn?Kl0aWAh9IGtd?k8H#nHgZ\#W&h@*m>@A+(-I9iIZ%\0j)Be3*`4d
%39%;!p#*C;&r]MI$d&*.Uo4`U:akJ*.';-p*=H9$Ud5SkHt$Ng."f]F:@4P`7-]!#`+[cJH%Bu:7`a9k/eU[L="8QsZb.S_FX1uN
%@'YbJ_!tqe(GfM4jVFC*<GDprJAlU2#gFS?)](0oj^#u7+sPt]aH[2<JlV+8;1t_d<9-&$%"]am/jBq(6pNl\:lq]u49^jlg0#P^
%M$Xtu.a`Et4K4P)KTV5@=i=6PYc%3#?:(SYj&q`Q/1Vm_FHd@)&Ih+U"Y,cKO$Y7toN#'c"c#KrMG5A9@4Fj'6$0oZJoM$-ac^--
%TqG=-@RhOXqB=,/@N)65P*HQ<G8AZk66jKDA0!3gQUAm#3K4@`>&kkXK\\%ZZ,!l#<@E!g4:87GP@\Mb5)+5N(3c<Y#,VOA$JTt:
%1tWU4l>:Ad=;EteOq])ZaD[5'JscU&iA*#>RpM;9TtQ1r0/Z\,^%/9d2%"n(2UpfL9EFO^_CBYGJL&kS+YPTKDf5[FUm!Q$SWCY\
%:pJeH[lha]QsoPUeq;A)d4W3;WLPG"9AC_6*^CUdb4^i(N7l=3$)eoPOF[VZ[S(.2aYn3Jgus&BFp6!`9"#M^ne`5iOQUl'&@uAG
%\_-ZR4X(cLMiGOn.**LAkXD?Yoo\S`!Pu&hPf(YD4^Jh,g*%k))$>Vu1*H[gR>dtTNWf(haddX^/k%)e,>K=0$AcCG>gOg$,N2c2
%`9^k:"cu=l((`m&-WAEcS<L13K"D[A>,ia@iCQRo+Y$8DD]#qH8:PPb"@*\`AK\LQk`Daa4XCbAd?Z_I(F7EWcOs`G,)EcLJf*c=
%;,AF9,VE48S@ohm5^XP<m(*h8;C0cG1NihCV,2G)qb$V=#SM8GR6U)P/:sE=MjT1O\k!T!W>T,aku1WRO9>H:@aC(*YXl2oYkoRJ
%QC:4+O:8NUU;5O:.RuCL.+ESUop-k[G!Y4.r?fiOgO$^JOVh'9m5p3M/=r0s6PoldA<T8uc%bK`L8h70CaM.\U7aYl\e;!C`f195
%0i]nm`a3e^5bSGD*!a=,L_U;-N4n)+aYQYj'mi4Xdp'C`#KpZqFC:E513S-(b6B6.?B+$e)D3C!USd?b,^Zj,.bS5QWRT/pF&]Gn
%JhFc6%k=6e@@cd[7"B+lPo,s1&]C9"!p^QcKeUN^j`lqB98jlan/,,EU^060-B,a>2c642KFK3(+>*.l(hb[^fpUXehR<BIE08?#
%m=L7oA4[];L(sFHC:^G!FOL[0!j8HD[!,EB+e]!)WH060?Hg?lN)MZ3m"g8[$m7H]/FQ6F84m9[CkUbmHT<.7TJ@dOj/IOGi)>_/
%UL9]:#%:(oajN":U=M4t6UI9+AG[1D3oML5&EBF&1g3DCAS;BK+U)>H/GTt>7Y2ZoeAg`\CkYsWd")ChTYWIc`2,(j/hoapBlMAH
%TU\7N\i59e>8GSY$FgF5'4HaoHa6>j:mPTR`Ut#F!Qt/0<0b9U5osY$d:>Cj3%J=D+,;jc$&B0bBa'+hR;N)bE=IaOnM"!poINlr
%:IBQ3';MV%gSGIW0XS'DQ<knI9)/nAM'AKCF?-@lm]a(r6"4kDHq8]XUkC:`i?C1_Teid&UtE:=30*EeU)[2"X_jS,JlKf0P7Q,#
%\nQscYW:pr2VqPD_W=KI>csF2MDV08a![oeIhfQg9V@?XlA&3qs6\$rmPpt1!f?=O:oG:qF9`IIcM]:Ki-&j.=8>GQVV7.sij+aG
%GVA'0KNFI-eqOfI%j8I?9a67T"A8c=WJk^8U+%9:gM=nV5!gKP+Hb4`&;2>lZB'O@M.Y/=fQ@ISTiEgD#2UugYTU&'iNm!3*m2h2
%%*qdfPGoG975KZ6nhIem_.$D5Q<7?aH+S`h'c<>b`G,RC'l;E56u:7OEk56RMa;HG+P*e?,,)suQ.TJLX-N%YJH\W=;#rr(r_Rt&
%G$#/N/(k<PLeH=>W#A3M<mG)ILTq:F\1rie,LAjpN"8;j2$SK8B\2<)gtP<^iU&c='P_P0`C2_>[8TM^";P$LU5g(M"I?p0r$Ke0
%1\?n]9qno0`%tB%\:0uF`Vfk$@iR4,[*+T?4i1KC&0%rd];/q28?Ied`M98-9_HaAgZ:u\_d`#!Z^5!;T;8::VG+ii>M'0jkE@)q
%m`4%[8/D`_UPX(BE:$Q_3SQ_hG#8HF.3U\;q+/(GKIdlHFA,@]5/\5P_lu<d0>n$8XSS#4l2MRn2(cH%b&qdCr=<O]_%)u)gA2j;
%N<=_JP!Mc($^].U-]hhnCF:;*5#6St]<nTL%6`oYB0Y,H=Bd8W.d?o58DHY%V\0TM.AAIEEZCaUgcqD7D5YGe>&)MtNorIOB#g"h
%h]iGdX?5_LaWmb?UZ+FT4#M)0^6gt3$[?im;,>BrdT,5d-q<@@^T5,jg4*j@_u'de3T$WTh;4Gd1-"aY`n=Y#b[UR,([TEUfiRBU
%GtZ$eJl3k%8?\/W?4'(sehpI)&(tiMef'B>%#Y$`W=3\K<R9jP=6\EZ0q8qCk74DW;Up:&AT^O.P$0%Y8uu5iJ@Y2R7a38@9,*&4
%"ptPFN\bD-VsOI?X[/d4qFE9fn.gp8OUFU6UnSK"8P8kK#%2J?-nWE%LRG"$U`LsRPW:=hb'n(r4QU2^%rm\5G%>`dd!MrhUJQ@a
%%GcHFNQbi34hK.[U%^$facEdud,'`ABoB`S<p[u]_6YC#b%E/@mEoSW/[mid<E^U;,GF58o0:?-oX`7L]%f*,p22nZ@,OWiar>9c
%P_*ZCCfJD:BG4OWdNE3OP.Yt+V.dKbOlX>mI(JA"*"\,K8M33omW=e66Ll5uJ0W'=,!B0(:@Qrq^lR*sGR>j`2"bC9R#\?H6f)]Q
%AeKH+Zn.F1pl#'9B5^7(gEcSYg>p*GXOOo"1SbW=[,V;[*Uu4_,sD&M3=soZKpK!+2k'L"#+ds`g%kVM_XRbg-HQST:-BM[XZJA*
%H%2P5>=b@E<.`H*>;T&AFQ\_B^fc\Va8e=Z"c<)s58At;)'[(9-Yeb4TqtD*+Ik,IPEq;1dZH@ia]P2VooT*;b**>^kp?<qG[*60
%j7C_?gna^Hd@?(s\e=,XR0:&mRLIM*9@>bT'm"eeCc\/"1@I'>0(ItdEq`BEBsuh\H,qE>MNX$Q%QSf#k8>=9A>-*=W[TG?B8_Lq
%,/jE(;)TK;XM;iS1n1<+AC;,HInG*qL@\m&_nkaaa]*:uTU[P9fq;3dB+)$cW*`P'H5<XQo]qg1hFSC$1tu"@B(55)-^$#TWj/1c
%0)''O0O3!SqL>4UNY=^Nr,!hPGh^X\Wid4&V<B0g,Z!pY^A?N6m<S>&gYM/:T,("G=VIS*7#5BD%tuucknf=r9<KTf&N7e\+icpT
%ME(p'#C=L.TfHJ@3YY.E;&!j-DGhsAYYT_dB/Qm)H"h:Om%cdhj5s'rCM-]-3ko6cTaCLA%-M8+@73DVs6E<jAe'=3M#ois6f$)o
%Vb<1CqD?;Hqn-E1Q<qsT;I6AKnE5sf^:fVJ!1&"q3QbL]3*a:46sc+d!CP1O4QNhh!4YX:BT,.RbaFIR>Qs<0F*"4Y:Q"Fpq\d]T
%B[S*&)fiA1S]B\)Y$*-3SY)n%1-Y-hg2Un'LZFIXM5RGpEKVIo<-8Gif2%QrR70K@`bO'JA]%J>T:nBT2Do'86^9l/E&?aXal8p%
%NNdT6S]FM]&7naZ7r`".jMMF@$86O,Qd6;>iGk:kWoi^3P)i,CP;9I\&_%]doS%@$j(IHmgX?jnR86p]+A`-pS<lg-")19bY\/@p
%VhJE=CX-37HXlPj[T5OW_I3R:X5piI>),S95ATX2d)3rFJ#lmp>*3O8q*k!;1;WJc:(o'N)q'l@@LfMafo&MtX<maP$?*DT"1YC5
%kt%CXlLO@ndE`l=88`U5KQ0bqekCJFR*`#8ZW=>M`$Z9ZmejD-+PB!W/utG\+_V[jq:8PtA2KX^-0H_cNfiJLh<[j`&?Y\>^=C[6
%cd8e4ik-qh#gTHYB0(T$1m+4cVMnEqN&:Hp'p(AYEmflT0$iBub?5L!ET[XS"8X=lJi6m;[CN,f>e27LIiLpPg?0HP/D]r?Xj]Yj
%nO5P.TjnuT5%[BD&GA.eibjfDV!n7+ZAE+uFqU6-,i\_S.I,lf&b6i)hgltFm[lr1OY]Ge89WgFQRY0Q%h*B.q5mR#OI&)0RKR`O
%-W)1J>RS[.-$0C=a.ATr%ofBmPb+u/$/CW#`ZbJr?G22;PdCNA4)g"9`>_q(7.4XO=@H#]4I#$4iUV-Jo,7KqTcinu-)6rNkip/&
%`I8Wd`:CL=8JDm9AW;d8NmCC>KK]^X;d]1-,Jp6OlKOndlm-mhOq3Q_8'k"d%tAR%Kl_[SIY5#Nl:%1@.(N)!:'iH?3?FLG.K?K1
%4c<2r#g))mJ'g>;b58M9KIf4Vgq"O9aAj-O4X6Wk2hqn>eE$Y(HTaAK`N'4M(HfC=I#b='3MZ-0[Ceo";""lkdt:<B9fX4h&(bg\
%A)6?PEe[BMC5oO)`?'=<M_eO^iM?CX?_kFreVI(o<sXs@PUt^<ISLSh?=(g@P:,IK5Mn:J?9cla5jC?ONiK&!9FFeN6Z8L*/7LE-
%k90G`HB\#\=nHsSkNgr4dNJj/B_a6[*RP2>LSkTES68'&^Tkq=P@Zm&?(OEpEm-2u'0QoWQT*B'bN`B=hq;#NqA.VHH'/-nLS$0M
%F1ddoQM#3aU2AVHLI,=f)]g.M@'+\U!"u@[o\$cCoP@*FYk8DR&T44aQ':-SSo^[,@S?P>GJk]qio(;?NdAbQ43F$;@H!>Z@6sZ2
%%>T&dZjJ<b=[W+Oj!28eSZs#M=HF`uhaM>/bTEQ[QF"Y[G[$7(p.%men/'@6CnbMgdcUEe.B]*Sl&Bg-4kGWjp?4NW9i>^!_1]Z5
%ndrK".UH?:&Od^,p..#t13WGXJ%bI0L+]Fk>+Yn;[+X"[;*G.X$@FCf;qC11;;0u&hRLtE=\IH$!Lg`boPCQ48EC5Q`H[XgZMs39
%-EDo9SO4<shF`/JP@-[(9g>4^>qFNfC-5C,W"7b,P5;mg%^Z/[$Kq"APUuDuF!q3O'@4b?PiO78J1'NBK>j$Ypj$d*pP)<dSX(K-
%UttJ!hk^9GI<=ls,mlY'N`%2)7:SY0K0Pm3O?)IBK/O):qB<]5;5gdb_:K3rUGkrLL1:Olb(EJiB_"GKJg;k12s+D%:T3>?d<u@o
%%cR`jar5#-L+lRP@t0C&T^Q`\\kVF2;hp'e*`c8r3+T4kS@.?)5D`=/_=UE\I']0tU\I&pN;qf5S_Q6A[nSu*_EmUG=P[6%TJI6i
%d\9Dfc)9YFd]Xq:m2(2/T8m/%1NI45I:?K[:-lodV+$!uNKWeU&8)5%Pa=^RJ$_A,'&,P4o*qB&m'el5VA#V-(WmcCHC4d]Q;UIH
%'5r6F!LP':g\X1Z5<aF3)JPp$2hM9RnnL-_1!?<\=\hVcQFerYY$=)!1:nDE#Lup9WJbfJmR-&,rCU^Mle86qCOJ1eCWVtrT(FlU
%->5K>#"HXV$!=j7'=X3\__Ho$8.MPCR'SetZdgHDVXs9^c2=EeK=PYTS'rSB,V2*Z_:lb/VgS'#Qr>jf.,0Ep.5V1TMTbB3GD];B
%33.(^:<"\nL2[,hn"Ck7E&o+iLuNIee23N]UhL1)N^#-noCK&0oL!dH;X!0N_;`"*h^i1m8ZJ%*%LjK\HD5@]%W_#N"la)q>*p&a
%I>gFS'gcT";.-cQK:J\:cr3VnmFncU.B#924SRsCqjS37.2Gt)3hnJ*r2`HG3n3gB@SLn@Q6[5,:pF]Wrog?Ccb`l\'WN-_?I[T4
%,@?m-YNT!qoWTN0:IsrO7@@dfEanWQqoW@XMb!+^2pDV;JUc4`ldM@eITCAAcjW[7N?j.3O2+X#'Dq)8Rc8k9a!"ii]p/-UDXHht
%_Nh4:&YJ,s2=I6"<\O#O%@p><(m+i(l7I)7Z+!/kohJ"IW/$.u8'836QHU79]0X179l'"!b(;0c;GWQh)+PjR/3#*#l=(j1'-qZp
%nL^j+rlMg<d]^`7H0[3pb&u[?BF`bZ'<'gF#'27]-HZ;[$jV`s`hcE`8qQ=lfV]b8O$6e5h?--:.\ebHRbtqO;r;$G9Yc)7mSJMu
%a&UEI;PB.6X'-7c9ThD,H^ioGMcFg.j<Q!LQD8sU`DqmK$+`FImU)EN\[$GsntE:3\;K?jb88,@lr>>JSA0"=oJe:;2*&Rr+)($K
%Fj=]a06ml2<jLWWgo.*-aRh.r\u,f$Y7#[/M%aQog#dS:hsQni204MDD!!p8SpTm(FJgE9^1E&3K?r+oE/MZ""@%&HBVhG[=JB%'
%mBr#Mr3/^DhM)@fE_-*jWD^XsRsRnmRElc?[6=BG-B$$NQ2X3?%up4%?dkm=Q7+ah^`u1&/8$Or6[,YZj>+rmP+FQ%4Nm'V?;0Td
%:7c`t>fe^mleB$0F&#'TGQ7#P>Z&bWq^hLoC#8_S]@YXdTZmJ[p94K=\]^G^GC0ig2)C>aP.!/mBs&-$L&H>o=?GDq2>$_Xq/"Lm
%+(su)*_h^EM8pn!\,(3dc)Xe&=Kh<t&#pFY*T)us4Q5%E?3cZ\J##0@IOM*nWp?R3lBfUkV7iN]a)sp6gCJ:aa5e+jc3Mdfa%7]W
%h6M8[,U&E`6cgL^8*,Q+4#]10`tq-<'!ER_^<5\Q4r>R0l?!7%.=J*WEb^-cVXNu>T,m)tbpn$85Oog,9l;.aKo*:MRBfE\ZOb"%
%_#mTpPW+ZAjQI#rdY&m+..<,&P:/ia8mZfVM.<>$':1*h,nJI87Y9<XS8Z-W8oK.iZlJ^_HL+omj$2uE:Tl@<4/jfi^WFcFKFl"u
%p4![>:a.-;Or2(Y38^5pLh)Zs7U-&$"P(Q;)+E?iRU*K-rqDWAk"XFp9TbhRo9f9$k-S$!2YGOeNWg$o`;+)7cFZM?J&ntNfrD?&
%EKfW3VoWG3a\E)VS5n>Bb0F&D8*;=$4')_S9\)(89K6mO`I]8[LJ2RQ77t9M3j4o-[)>bkrSYfnC$/_>k825$=T%.*EA>&CLX`5*
%oH[`^l/[%jYjUH;P50hBT[7:/o5Tqf7fo]\U8CV'?5<7VN$_lXEFML`CG]$iRLA:'F05T#8jGV;/V`VS.H-@@S+p-WP9pV1SaI]K
%6h'iVgSppC610O!a@.uiENF\Xa-jZ#31oIuQ.86HMonC"<m<]tUf_n.rCA\Hl%/^$ZeC,2bo?h_e$l5baO/'>+,\r=a;<&tk1_O%
%Ac?fE&d>Qec,!M.8Jt)MIHkLK*><bqI#$1DR[D!:$HTA*ZffPk)5;bea[]a(=6.`)WX%H@"1du<]EFHlM]PVIj604cS8rq=o.G^k
%/;A0pFk+s2cdYUP3;6%9-^CbPM7'_4k7<S_XgCG==7lGF$.@!VhJ\e$k1n<2hg=7Al@tCtKh%'^PFjs]E$S78P:F0unl6'?L>-oq
%'*mOgXPH"NSJ\o2j"5Aq*@($BBu96(D2S0DP)IU[k#4i6q/U:S3bHIg/^_btK7!#-ZD4%T*i3;)=uclEoi;-#+I!1$Or`GFKQE$>
%H>R<FiT-cIkr^J\4Bmk)c@h=LKK-]]lQ+lFa@?eVqt;Y$m'bBBqeHci1o44/7<G)5oiT4:R5oB6$(,B(jpM5>T9^:>\QOp,.?1WN
%LO^$M#+t_E?3B@YN$d.uWdBjL8X0'S1aB[SK2O\Z5?o*6O[l>C"C6Jp&R!C$/Yp/NZGb#pD>s=i;-q"*KbQ3$IAZMi$Mg/?M'?9e
%@%(/[o931eHtu5R2*AHPH:R3MO9-ka-E$1XP[dKR%[mp.JipXjXS?f#@-:I9<Fg9q\OdED8aJd>`96B7OU/n>K9OkVM,`t%=ZdOR
%6C<..^P^fBd88X:$!Ikn2@2V9j,hn`-C'At^2Xo(h_`.-#<HGcCq=V:LdO]CrRrY)k60'+o<p<C8pn#h6dL=T\&>!O-Ak.t,RFg*
%lD?!U+e2'*R6/1.oq6@rnEP6TLm/)cKr)!Cd@f@S%35V%jg3LL0Jk!O#cAut=+.T`B,5sgh"I)+U<*KW2C%dLbJ59"\iZ;Q?i)<-
%8hkTS4-?N;IKIr*8c50#D'd//.>U^8q5=YjELT+VlJ66bKVsFVI[3jrSuL%2G3n@+c[P=l7;qfM+457#,Q&>,`/'0Zd,ouGYM8qa
%;$]\JG>YNCatKO%cAN;X)(KD_W)(lB].sTHRHTl;0K&$GO3I0JdA.$3Nn'g^coo&$;>tt[>t<:_d'g??WqVk-N(U'ePS)C<`N,g\
%bns'SD:*a@<7>@E68)J)<tDES'dZ(*c8B=ql`apN3VWA+s/ihQ]P<X@Ya%`5o71S(1[i6H8a!0.8^l,b+d0t%Tg2YF8-2KtP!*(r
%PFSuqg>oJne+b=<"da=4XCsQVQY)R1\UJ9bQCC]&CClE!/&KEq0<QMpDsq0ubK)7m=r8jPllNo[/X.BBX/X9!ka,hHBi@Qu(e`;L
%[Cqh`SOJ_.Zt&A6Nng0r-]H?17&Rre=j99X7tu6(Zs(6)a4pU14-)PO1pM'PlQQLLN&gK18Kn"oB@S(LT#h^!SbH>T`hmCr##E:X
%g:WI^XJ.FP5nBp'G0nWpVRNWhKho=",*$J;HKH.cpq+s1%B4LFg'#st<Us-S)kB\fIGS^G:s\=6li$N=-^G*CotaN:eBC%N:qnBP
%o:YrR;^0MO^,bt7N]ke[ENbVF&QK^/n'9`:TI?FEk\jJ0HmdY>W9,>HN3$SShp/U204$EIf3K3<fOdqOft%g8SeGHqd<,?HK<Q=a
%3i`TLHW/t7B*Da'@d)L3ZWP>UH=8b9C9mT04$+lAmAt_`ER*&,ZHJJtluo`%EeS\^qcV"4F'V&f.kg@D)+r^9j93`806l,"^7sA;
%OFnB;dR7FI6D8_;'aN9&*/>tfb<5Pn,5Ei([&"3H?ZF4i*O/hh\M8+_5gaaO]lntRELqTird5cC/q@AdjXQ#7;*d&-#L@<IE8G>Y
%pL9R?o%?"f,mJb86/9,H=)uRBVL!kWZg\CSjDJ8n)VJQ\^HaKfWGea@'FLIO'do6l+_1n9rd6`-Jt>?bihWep5hG0@cHCJ5l:?['
%gn+1lgNYTqpYW$AD:k3i6g*jJA7Oi88-4lb3\U>B,?[o.8D7._n\N]s,5XQMOMAlM&U\Cr6N"5_AqlC=DMt!)b`*Y.^-<r*.`9CB
%-!\U/34bW>ndB+5a0aeKiWtL?,#sbpkt(R6k<*_6Mot=qClB42LDUq8BLq#CDh#6X4QMCh/:ot,c$VkcIh4[iZnDmNmt&qAqL2DM
%Nd-1Sou7V.lUg*J$I"aA`HMg@/NIj`io"+5SiC;'*`Of+-<2AXZZAl5JXemheL#un;&ic\HhQE6=+?A"],m4UqA1C;%qR"L.lUuc
%D*OG`I+(g8j@84jg!4#tglCb]a+1!Sg=/7FH>aF-k,k:/.[mf`l,)Oe,eYI%L7d!+s"'Z<g#i`!hmT-*<\inB%c;b)Tlpo<d=n)j
%<uO,&n]:OH6oP_#b1u^,7Xe;m:<@F<@n^t[K"W<7f'!PF,cK(<Lm4,^\V;s4;:b(eP3\\b1@^b`5G-]J_W?lK\+lUUrGa:?Doj`W
%3[NALM`<jocA'e,`-9n_!JR\:eW]bB&.RKkViR"t1JD,.e>9g5ZglFa_6%$U=;(X.&O&!/P59eUkp\CN282jLF>N8B;c;aoT4TU?
%4,4mGb2n)H3r%po?F$(%bB.Ec&+K(RBIlF4-">;J7?bq"jc9?bMP-KXj[1\c'..5*.bCCZRmAt6o:U*7/8_eqI,'U^KBdU+2!2G(
%OZVg!Do.IEcQ1@a5qdpOD3U(V?YmnqRG5>41Z_b64AS%qE9JV-9(T&l;k<mAq`So-QhNNqq0)Nq_<gX"1Y^^2VA!'n&!F+rQ@mui
%Z^'j8q5h,UhD3puDK0U&E9?^T\U?<ZQp(]Aq8^.6/e!-!dhWP&$D#Lf["Y'R,j3ZqbqgXXP4/D('-qXqW*FQo;ao:JH'WaTN^_K&
%'kD4EUDBA1Fscb'\,U+mCsVjG*F&91J(RDH4K=DjY9>ugMZ5(-/MrXj_j@Cnh_6L"$ADru?*eRsg;TDPDrLMnF8YCW[rA]q:GNr*
%k^(d7,^V)Q'o&&V\OD[rN3ROUX00>^<bB&Qr`uYjX.npic*Er)O++&,6E?3dlKI<H\Ul6ueX<&[,6tS6an\7aQX5h74[\YnUeN>>
%R=hoana1"Dmk_?FPap-";PEFeE`:jsZIbcd[Ck%jPROX-S)-MX[DL7>le>eHc*tIf0BXuiZ#iNlX'!4#onH_?(SQ@)'u@<77]*ej
%".OD4b:[OZL*X.TIQiHDSZB!VTmb'.EPU<##9!YJ")M^LY(27+ZojD2#Gu,d[8%d:S!i\OH).P5.t,$"Su]#^mY'k,Es%4F_0n"b
%=3!W)g"\e#+A.AK5L`;M-neffr/Q",]7`'g`7gZR9hV'dLq!DLnm=kB9hrp0mkG<a"(W3=#nSiu#)H<[Qh)_gkc\[Z^WUnbrH:2t
%UB^+>m`N5a/qT5hmm7JX<I#K`c62s6$;'(8]Z>R!PDrGDDQ^\+[FZO)OmgtGV1nPcPas&N&k:6N_"VY8p3X?*IG:5,a4:;Vhc+F\
%C6]LeS$opkZqku/r[be8-a`!1;TjN3>$q?`06gRA6ZtB?AHe0`=`u(mkddd=!o'PrjIHQPI2qfQW;BX;GphbQG)s#RH:PW#>s`lk
%/\>%sn"iSnipD5lr0J#ideQ&\L%Qa:"J%<o`tC^c&ad>cPl((F^j`uPH2PJE&0ST<1Wr0WK%VV?$I!esZJXN)1![EM+M3Ht)JkK<
%o6c3*=>(/i,pKpR:]?(2TH=q0.mQ,VH"<>?D1ca&cltTX=+GjU^;u_cT;uuKE`R^FjVVMG;OfTTldi=3:A-(jo$6:_GG'//`j-%o
%QBG[YrV`J(J"L@eT1[Hjg;%T=`p]ULk(g6/>A#IoC3sU4rYnCDB3*f1E!Y83ErX9,V8'A&q@2MrlC*W6<r-`#FBR=(<d&U*,WG7#
%57A[KDZ)+`lSkKMC9$reE"D?DBCoICYhp=DLA!^(VqBiN/:RcmX:N?=o#R63gMq[)F>d:f[uiJ9@F6+Q/u]*_^?c-YZa["'Mk#';
%@+ATEbha)X1!!Z)Q8-[T(a6M:aYc%djd,5SjVg-b,GuKiAV]sF=4#NjY8Na@i6hnuFnW:-[*NV<YL(k6=a"/rhB70dIXS+4%^KI4
%/h;IrXKX2e5gO#TPKtl#,OZn$lJmtM1>KY8a?-Bh[sOoVeiUT/[.gqWC'"%]J'Q,_GHWI(f1Wee9Xj"U[jj#>E\=i6JuA0^A>1l2
%WYfjEZ\40`Q:0QIT`%WI$g`>q^V47651:\Qh;)[iIi!Ck#dAN<Y4D7N>9iG1PmbU)a7d+3o*oJ\B^ajYCA'"Nb&*c9VY&5iQ-AS@
%mODT*b:A'8nuG,bbrIPO]%!_413;XBf6qGoM_+VH7`IV$oHN^kY0B!m)$"2lJje]>E::p:4a[dbeH1Z=B8/2'!-J;2^_::q'*ZQ-
%=@O`AP>\V3j`/U_jL"GGgbZRC2K1_K!!T"Ypk4"?j50BfrGI0Tgb[@j#.SpPG,Ct_"&DlIULG*fmra(OGP2TI:Z;*j.0EOsJo9%o
%Oghsbc//V6GeslH!dqHBU<'uo`W-C<3(09\cPQZ*W%0Br*:eP^q<#j$$9ll-M:4s0qmBnJhIH0=o9X7E6H@k[d^YAlMk"7'A0.W?
%M3H=QcKBW4lO`Da$Z&R_A9ZH+g8Wl!:]obmZ_ua^;,\tMAq/"Z'lccc8:BC$3W1.k"qIVV`R&_/$P:p,*]`lI^k;6)J<YZA(*MjZ
%+.+'1aWlj:$?fr4fPM[TdT&"UZYQ+%hY.L]PDs*`A9-]B+HCpPEjl7sm+CH_KF$IBGp=!u(Ei$Mh9j0l70rH;5UJ0?j8<P?^?b%q
%2]"p(3u:=4cA*"khg:Hnht#(D^Q"bH>@a=_[J^l%SCTRLhW?jsQa@R]Ss)\$@]K#'&+[;S.59YEZsuTI`4u%8$?k1qgW1hSUqhAk
%:%[qTo)dhD3X"&="(]Hnlp`D8&^$,r3AOq``A-q'r6#RAaM5$0)`]4Ba?121NfhGk2nAW/AE7pO?=4s%&+]SCDKf"6%]6<AR'67>
%N-l6;hA8KWQ1<VM.=%f+I!7MecS8[OVeb`h7M_L=MjkrLRj3i\,E&$9997<KY=:ts2b+WB7i"$R(,n`!2b0/LRAXM3N\#(./8gJ!
%DN68-8!`F$nfW8]Z@T?^SIK7_S7;2V(EdJ\`UYqM>:-N+#?ckqhS;GJMkCT#OE=LHRFo(V_/9XBZaJQ'nZttF*]a5RWK'KekrZ!J
%1DfC'O$"KJfTE"?[fo=6.Yag9SO_Q2<`bKE'O^"fq4D*t"SiiWGAFuFNboi:%V^rch=8f9mB.:pY&sd)pudd"N'qO!!"HE<#B=f^
%KY2A'AE%tR+o].[\bH&7IZBM6`f<_t,9l2S-<toR^;&U?J$3Sfi`=)*Gur$#R(,IQLk"lOFR6I/gW8^;UqfC%,skAmVJGYrHTU\C
%JW\^5$4uC(7EFeu74.ki&`V\pOGs+l5&>nb?>X5I*uuN./+)&[Oc`j;H\$d-4G_`X7*)um8:cW0QjE6NI1bPthGm"c]*1lZM*&<T
%3NXg7]`f9VEK7,<Ni[,YXDX'"DN:eM13$YA+o].[EH<Bth@_UuOuERm*XkeG?rP,kB8tS[rW"(Y'?9(f!!EBZ"p6Ub"#:&_1'Rh9
%"p6E\[q?aBq@/*K%T)YON_a'@keY'^K7Td6:s&V-P0]dAjRTjO\bisG'9DH#+Ql74"*t(ZO1\tG!it?&ec:![F0]%0O95#r=56j.
%M(ci)0?&c$B4hf!kT\b>mi;`r`%U[3$&*;gIiS&+_miou3#<\j0?;nXea9)<"I7jEfd$FsY*]2L5:VtNYLX'Cqc<'ZK+*gRYB<1,
%dkIfN0WNSU?K=eB[taG=>A*p;\2n;M)SLiJ0MgR(!O/ULADEaU\1rpRi6UH9&g>%4>AadAm'?tcY%B?H<p](:Vs+u>KAai:BRIA\
%O[1L0nc*T&R#N.GpI#;27ZX&#,/e>44`ZQH'Vrbu-:#RHn>:Q)%q^=KMOei#2lAfV:,@pFF3]YacAH\gMK@(cm@6IsaW&I#_uB:0
%2X!q/r7H0)S&]u'Rnh+EHZ>ALKgbXpIUNdK<KB$Y=$Cd7m/G^\XO5^uc?,p(D7V%QPZPM7ldH'h\0Z(J)U]X6c8IPUr%;WO)V47l
%>JiM7D<iEZ*@sNiGL<iVV!AS_rRR&`2fuL-@;=Z-29ab.VET_%>eCZ[9Fbo<6iOFGc8IPU'C!dp`a7L[25EI>j(qql]!01rA/B)e
%_pSYAe<%s=4588h'Q;_EQK;sfT+(Beh:oAe.0]EL5Q:Pqc7[*XhR<)M`S77RcbT"0Am]2?)Y-%>c8IOr/[.qYHhOnI+l>nE[]N?E
%muHj_6eg2]R=T3iQrd[b)EuF#[Y?)TgX[b2G=R..a4[>Eo]M@LrRN[K'%k1UbM/nKr5Wg)[e8n[h=9A(6/0tpotWICX<XrD%9rA2
%X^PGj[e2)ZioR(bgXbjcJSf.hF'tIUk2C/]_l%b6e7[`q[urOAok*mZ>Ii.oq,V?EB:=_&iCm10NaH"kcFj&ZDqYrNRq=g!c8>3/
%fpVOQF._*,ju(fJ2"bn?>H<J/77q3].X[RFp'[;F2V%['eA-NKp:Z^+0';ugD,\:>:\M6!:Mk[=meWU4._H:.qO?TE]Z8e#H):Sq
%VS98OMk,iu!o&r0c2lY-^VRHgH^OM!f"4A:1U$Y#o;u;Bem#J6QE=/2VQ#.mnf*,!!6iWYn`F%)*Zm)nC-cd4-\dZ,<K5S&RcI%l
%C$GkNAA?0U]N@#JHB#t5VI$qtdo:tG+C2d'VO[b'6PoX%=f*3kZ`AA#HJ?_Ll1)2&Ho]GaOV6<TL9M$ugXNI(^c"'Oe_@NeAU<+^
%V\cEhm535!22%NtfVXD0#I^Vj9]!38*7`fq#Nib)1q[](_d!9?XWd_`,%k!KI.t)BDfbKXX\ZcoNW6R4g9u`Y"h(C=Rt5EkfH+tc
%)V4?DCQcR'mMX4&[YD*l[]/5cJSf-]VmgLPkMpDXT9A]ej..@IG,g88=R<MO"W"EGMckVM[t+'H^q!k-eu.Mo7t7&[fsZWP"Lb:<
%mt#<lLu`DW6gu\\[e1O5jjB>ocF,T8-*YXGQCblM2-etl[YE_IZYeu+1OaUk&\#*KL@_L^2Dm$AYcG#NDd*GeG"$6%qDA-@ps3WK
%D/7d.@%/'p)VCpAI<sZ!&9aX]g\OVAnlQo$gX^?"DC5CK9!lY!hXK<;7,)Tj\.*+);e!<(*ROe'h6A'VJ[HOE\:V?o!8BX9X13r>
%jo-F#omlYom9t2e*Lb8;2qiH$_/:CLDc:r-iGA+5DVhgK%c(,fVoP4&711]Zs6,gF/+<F1p\3G,]K^PGmV\qR1>NF]2b`%<%]^)M
%5'NmgU#`;aGI]NG1r<::VWgY-@bWQ\RJ*[qc89rbqa5^D?%'tE$Tmgn`9PRY^\^`H=F"<5+k-(]mR<(J>F]tqg>74h\7KTm&%CLk
%e"`qV]YLVo1sKE6k;H$NG=QO$^AlPsdbBTi$=HHi2X_^M]nbkC$u74ASRe0QeW#jASX)'+8+EGcbdWdMeOS)%2T;)]:K<^eo1/A[
%h(RjJD:?m6^M$^%5g>A'm5%r`#TS]n#WD<=Xo#R$_%4WF#I&(.Qj;5"hQ*Afp!,ArgWV6F$#K52Zb1/P\R<pN2.a.3RohHNgQ$sS
%,OIB.jSQ3kZW=qqbok3\@)GNs5@[1br0n,o%GS=`FU)^og4Q/;H]IjQB\Q[="h&[t]G7kl5AN*kmWfmm?[M"uD*&B=O0m[(^"1=a
%h2DI>X<lp.p,s&$mkl?+[U!KDp%Gf]ikimm!np_G,mCaAq:,Q$XLK^+gFg;Kf3jVMTl&QV1iJkT^\VVfgV"5Xr*Zt]%r?[cnhuFp
%]pE6;08Bf2TmK5bMM4?:nb2(VoY=e1`#RFlq(fU"qmk_?b]-IdD4>kF[N14i(2+2Kg6$(C'$[lPq:<1f,;JXeRVc90dCjDoH/M$6
%=qKDrkLpU%VW[g^D"IQQhR<AFE5grV3nh#:CO"To`,mLfLY_>gXF%oug\1QfhM*%:^/o-ZXgX<1fT3MD=.4(3B?^g$gQQ[_p+dq[
%^c%d%>2H^d%U1g9`B`1dW"a1)4[XDYGBrWL]>+W]@+=-QhM-#ap\N.CXVL2DfXBg:EW'Jq%rL'>:CV-hmpu[2God$b"i>@CMoI5Z
%O1-bgDL'us7!%[<l1b$+@\4ME#cpRs&D/ZL$T?6;oKq41Y\j8_i;1\*-/-u-/HrTIq9]8u4:dQt[V\6)[td`-gNM>AR^_ZTXC*7^
%46ZlPl%FCtge>?QRoMa1&o?<+_4HI"X+t8qV-_-q[c^[%CnmBZ*8!_hKBs#TD*L7pIWPK2g9s^5He\2jeOS>1j^,\jS2DMl_(\GX
%"<0h)hs35UQd!mkD+C>ZqTXmQg:$1e'A02FlNh<r`_jBcqmk\^c+0`cgGY&MD*&BdXl"9VlaM\qAgAM?-g@a@h]m-uf>N0A1soZT
%d2*'b"Sbk,f`>k*]*3A+D/(BN3@+dW!3j5:_qWcR.[Eo)KKQnqr?,SVq(@4C12,Dan0IE%qhmAFIJogI#n9LOL:=?.4BTH&-00Dh
%fRlTH(;TpC"7.];nFlO-N[8cqTaYjH5:BW#JJ-E#p@X&k-)A/+$lmO5d>T'i^sNQ1c,e:k*6l:H$lmO5d>T'i^epaQ1)($%quh<i
%4-?&K9qWgg'8[%.UdtKQp?D&%gXkK\F8UI&!Xb/g>@8!5r:9P]+TGGQ%s.pi!$;I+!45JiJGi'Z1,>*1IrHHGo)gNDIp\h`2U>kX
%YRTV!D"IR<JSj_BYQ5&7OK]#tb:$I^_(l@`;6Z">ATTJu@i6<1=BNS[1)?1\TFBDQ4CEWT_O(Sp:E#PHY`+<J1b<-G)&(2\=N897
%o_rY/Z,1J]8Do(./kFrQ*%jeAJh/NFj+9BG8E>@r/kG)U>cu00MHm=*jbd<GaQ8:aY/o^^>cu00MHm=*jbd<GaQ8:aY/k/XhAME9
%LNt",#"T>6$bcJg09^BPXdf1I9[U'$WdpY&T+EEZE*5hWQ%&(T9HCkm]6(H#J?;EN!5#t,dXq2#]\ijlJ8'rnJd@a$s*>HFrjGR.
%eD\Z\\Ks[pD6>G`%PZ.mKae%:hW;t^Yo-Wt$s`[Ps2Y`QLHjhgB,LX:/"d!K+X7qF^A<k#!%oO0RYEK&0'>DPm;N=(4o./5cp@/@
%-?#>botYrZKftpo/L7P@ac<,:%(?)p*GhOV&.\(/YIoUY5:A>;igi5/KN[bYAA:Rm2\2NCGaR]&U.^DO2h(a-mA3)`L)]<n!X"H)
%3e$6Oc/C4/ZY@)X]k(h_)t4Wrf:Y&>oEKqSB4Mg'jYc62#/.mH<uCR1,Ps'u-Z>JDpZ5*'k$B8/D,;1&I1Q1)616Mk*<s3T^pY=C
%IcrKLj70QliQTTS%3-t*Y<ed7kS"/KbfDF+b%o?O%/PK?+#)ob7eU'I9&@#*pi<6Ko.#n$2JA,dL5A(Pb`5U`N;?.tD-FGqA=NBW
%i<5e@ETbOf[')JQi?Y&nf^#`t_,nFrlNns8"QOuuZ-1+s52g%EJ-.:@35D\:.0+0+4NlJ\(H`uH9^D8*!+8.p2X$&[]\,4;8J,@"
%qt(FRbq7"n!h?4BgK/G(EhW],W5sgQS1)I8Jt/b?-Rs/2+=@M:U*:s7EhX^))K;E&Dr88>EhX^).WV6fSES%NL7DquM2%O6aGGYA
%BZQ$jSERbFOhH0#[j*8H^kmW4(s%PoSES%N&TD2%-TZ:B,:<\9@N[$FEaf(tk485r"VWmNOV7gW0`k*$j90AQ1N(i$DV-a_fJ@Et
%1Bs4%#+..KQoLKBmAmc*3J#VrYNJu!Mia#6$TYJ2Q]Qf96:+EujM\p+6Gfik!`!]XRfffFddm)XYicW#AquIebE+h6<*al3TeG^#
%B(IOP])ukjEt8<#guetDgYS+,I5Ub5+`MLs+=@M8K$t>7T\u;X:))W>r6"`TK:F@2M1V7raGC7oW6<q>cilF,OV7mY;$'KLj?uF3
%<9-G9:/p:B78?hC6pj^+i'boJ^7*f<'.r-17o"0e6pj^+j?sM<d?,(O3RNp%*BDN0'*C6LJ.lF<qs&caS/B>(Nh#;6-RNkC+=@A6
%@N[$&Eag.=#'+/s-RNeAAT(r#S]HX*E+0t<(33k.-RNkC"e8ZsH>Pt"8hgg[IBnq[b6^s>Glm4Z/T5!*;aU.++\C7(]iIs:e8dX`
%k`V='k(KI-6IdLc-OP`j"k6"5JhT+(Ns53sJc]Hh'Zbk=A3g[1TEn[sKe.c`=\sl)-q"hM+q%#*`G(H0N'oN9j[cRF3^FB,;,EE,
%JL4Ni.-X]&-VHL+dKu+4R7(bpTJfq<S1L=.(6g0SlB<M*-jqMh"XV<C)J)3sZ32Xg6(,$O:0CDl/>uM`PU[&UPm,+K!bu:4\[%l7
%=\u=RW*#?NZ7MqW()/>.Wg3g"bC[<:6/f,BE`l5M/>-8a&2+EkQNcKo''PYc"jDQ*AjHa0TS?SN&[S-f=]!*hW+-SW1(,S""f9EE
%>%RdiZ_3ai:sLVjB,21<9;#s!<&=tTRKYRnJtcjC<O8@"=]!_OW,#G\2(RmZ'm7cY\n2Cnc&0)E7:!6oY$"WRXF[NW;:hnJCKAqB
%/*`Q<Fj5fTAd)JHK!&6Rf;tod<n&uWlC'TW2(Rs\'m7cY\n4B:Z_FU*;:hnJCKAqB/*NE:FNo]SAjp"3#.eD8?*g9.=]*ePW,'sL
%f;tod<n&uWlC&H1c&0)E7:!6OY$"'BXJfo8e28cARMBti)X*V)Fj5fTAjp"3U97Wrf;tod<n&uWlC&H0bmM$o7:!6oY#tj4Z_FU*
%;:hnJCKAqBCS5Io!W.t9nmFn[Z_GfL;<Y)0FB0):.gV[\K[,HAB18N#U<m%?k]@.",Rp%pIeo#oi2-iX"o)!Yh?'4G)$&\#aKtP)
%HX;4b:_2&eJ.r%k?L*,"&Qh9"$g8HHB)lY["&,C^AIm;]!^s!fkiO6E!a7BEiT.c^,'mM0H6U-?]D,9h$^s3]$FJFfao%rf^bS0?
%(L(QAJDl#:&-9\DS#p$Eh//Q7fi`#J'k!+_r@7lZ!EK>jrr+NOWSC;R+?pHGMp2D1M=\I`^smN2[V>36qiUOEack\1&\rd'E^S(\
%Kn0,BV8W_-6!E,%O!ek7fCcp9/Jp_2*3a<b':1=hFJ&j-^BCD[6"$2@Q"u=2":0Md@G@"pIpg;@a9Eml[h.qr%._J4L(+$8_^tOL
%=Tlj`[M_&=-J8%HD1QPq`t\Uk"SmSqITu;8jMKGZl%WM^0(><=H:la*1\`K+hiY]7UAu6JpTsX3pCu8W`&<_eX[`"ga'JiEAj\41
%)]Hp/%E>tBaG)SSqjP(ugPe>`fUZlN+&?:6pPg'DD[Uk[2Y?"]Y[H#F0Jdg<)+KPNG9m"lCbrNk5rME($W[dS;rXguL6Wt[XlET9
%IC!@u68@H2R5!35+raPhCbpCD#.>Ct:=J``SP@Ok!'=]P)?ON29*n1pr,TVF23nuI]4JTJ!7Rj96PTT5`_JLi-X7t'F8.`:kQ8m?
%!OgY?*'R+c$34#ZdN[TrM*>HNO9[rt"j?s/c3`RU.M#e-7Z%2h%GD,8_#C.\#dCLL.0N=[8k62B?1@Naem*#?'A-2j[H@C^!&,Ws
%OZj3+JT')DV8:s'\MkS6`V/`PdZID:]?.Rp\\#Y#bN3ZXQ_o<+30IcE%fnbrX[dmfa'93aItHDb!UOT7%ft.JnMmt9m+B0(,o9cT
%"h"hAc1<J0?q+fPI2K0j^V!L&HUlAlnUU:*PBT\:12<LuRa<ufJTI:,42i5<!bMS$G>Js!W!QbZKg+c'-^D#I4CEWT\N(_8YC2uR
%0TKl<^2!5a.]9%D[W(Ajm5k>bn)b>dAe]<C!'B\2F':RekMEP@#dD8`kI>O>:B6d9ee/#!Q3uJ!V]9!5=c`s/3O#$qirM6Gc\qis
%Nh.K2rhM[h?shZ##aj1BkKD^fT\VB=S)oU&M_,YZIa7Zo!&HqVku5ErPs6T'&5FOH7t<1736.?6?NS#\F-5h,41G'J@7uA/9`[$O
%h)W!8"lo\GYe<MV--$o9@"0qoE>-I!C'`I/Y]FjR0)0aV;(f:Nn8\]:]t8:jQk>cHL(gPkS<qDJ/Jiqh8O:=sAEW&pg.MF5Xa=pt
%E3k63Gq</6=Jf?de8j9'#HX5R;?RghW60".;BioBJ\mlV[N;B@(Y$e>l9KOuI(a55QYM]"a"=5\'pPL.0]Vcc#dD3QS<$k]9I'f'
%'EN$TebQ_O,+h[OQ52O^\C/15/HrjE"\eqtkMqjH!d7\:10232jnoW">[eTaYTl#O%ft.Jk'Ys9_U2,k\Cf6Fa"=5l'pPd60I,)/
%4q2np17XD0##6El[g6B"S^,8-!uWtXlk@K)]oQAEppamCB+AIhE'>me\p2"#/1P96=Q)-2&t=u&$Q6EMN(p7j-Lc#uF?XS.@Hgif
%Fh$)0:m+79X.Z8bJ/P&7oNA-9-83RiQqAjN0*9eQ=`uuHbr#Vt2!l_(E3lB)YR]1l?^_%."L@W=3D79m<gH0W9`RhHRNoWIUc]5s
%?X%+JR+=CFa/u9nrMmsHQ7\VdEWorMgo;c?.:>X/=V5$H^,d@F<gZK/atEhK@[lt/CI:QK+M5#5!Pk"0L\6F7,@!UaE<J`?!Rq))
%3Kb+GS6ADgQt!,fV)aaY"1GY:h[*[^3(=%<T4jt:s/$(Xq!$fcdlWkP!e.ci5eepnRc#YKaW@Z`_"3R'?.XU(i->:>4)3ZF#LT^_
%[5FUALAj8J:"e#Sr@V9N$1E>Ap3UII-L]u_^PcE(n[:DHf/7[-V;j=i=`rr[L"`]N/*`d[?<qQ^3(D)+@?i)0lAFAH(VRE>D/kNk
%%&uOOeC_r#"<%dJZJa7DEM%+?lA$A--\q?9+anB!T=cZiK!lK\mt3QA5,7iILN,-51HYYd=jZfWVcgb:g)_)Lr<(EPU])lj28>Xt
%"e]`3gWU5Afi%+O?ac2Mi0OUAo06USmsqkBT?lhI5g,#18+8U5D19UA#MS=Tbm_FX-S==LMg3YoT%&QD2<)aBdL`dM0NAQIg\_u[
%UddI\&Pmf/V,)EUP907i7m(Jt:Kk]#)Y'Um4K/ogC;c;WnYAZ;kn-^=gSI\X`02)/A4A[!&Pkm7P907i7m-#J:O9sC&b0C"4IHdW
%I+tJn<lC1:nRP'NR1W5,`01f'A4/Nt&Pkm7P83Uu76F]b:OLp3o[8t[.!.tPmm;Y5X%^2"6tBF4=]RqV'p3&rA>*8hha;66R+B:@
%9c-J+n;O&*<os5,TXGe[7%+q*(7Z'k6Rc8q;Rd:7LcP9fW:Q`b=$.(?Jpu&VWZc_(aIX<UVhFCc&UW@eN_rFa>NH.(4dFZL#oQ]0
%#5N_p%Vd/>>0*?P18op9WZd!eaIj/$W.YR/+bNt>TGB;]KadPNTH,jU#*"^1,@jU]):V"X[?*[+A5EXOe3XB4O?l$?cj1NMqa!;W
%L('LoK4`2t&Me$Q%-f!gHL)$[c>^jt))>l[%%8>lHp<!m)Fh5Z9&\VUKa_-.K3$'d))>l[%%8>lB#pV[12)B2W"eZoHp;9LjbQ2u
%NYl;']4jmr<[u(8WH^3612)@M=qQCY*&6YGYHGqYK7\R!%OrWS9$!Y<1$Em,#/-u&MRSLRe8iN/3C9pPGTm@*kg^CoA<?6bm@Y@Q
%W.k_\+bND.TFs!CGp3I+W9"@trVR^_F[Z`W<'pl?O?pT&["E\GTH5keLC@o@K3H?h)D\7G%&tJ'C<3%`18om8l61e-5A1:]O?k+%
%cj1N=6O*4F5qQVD$Q7G\#.9OY,@o.,))OYaq0p[#=s8N!aIj8'BSHqa+bN8*TFiqmKFAbBK4`2t))>lZ%.aAdV)^0%)ONiO0SKp=
%+bNh:TG]LuL('LoK4_%hVGJ%%Te;]V"pOsu*>D,e-.J#L-mD;fblpM".\X$Cp3DU'ia@WloqJp+)H!MflEW=`B'2Q%$[PFW0NO]R
%aZ7k@9.2if:j"Cals)m5\V.h@M3[7+HB,Dr=FC*"osobHEs_O&&dlu3<1ll86,smc/4.B,F=9MC:kpZs&7%UK3p6h9TMUP!Tbq'%
%27eH]F:%X(&dm&5<2</88XE8;/tj\!6<1UMZ?4G(g-MDd>s`,6K[OrK[HS<]dj7tk9.3T&:nKA65[?^1\qC]=#rV"@+1-YeQ+DW(
%FU<3U&dm/8<2rS><L6O_/tlBQ6FFCXEch]]l4OHT5sKb]FZ9tcC8b7d:pI0s@U2@?\qH5h#rV#]MUj(QX_Xk=f2/lXTkYV?K6C(i
%>1ZTYY+]T96e/c&Wc\bNlPceS2,p\nW*7eL[B?3<>sm.'kQgLJ:pmI"C0a3W\q[5-%9;^4Wn'%,X_Xk=f2/lXTk[k#e[gL8FjLZQ
%6(r%!6e/c&Wc\bNlPceS2,p\nW*7eL[B?3<>sm/RL8oA*<U6;"["C]q\q[5-%9;^4Wn'%,X_Xk=f2/lXTk[k#e[gL8FU_@:)QM@S
%5A1:UWc\bNlPceS2,p\nW*7eL[B?3<>sm/RL8oA*<U1R'ehpF/K7;/Wns].\Md?i!2<Plmc8F+ACT'8F:iie5jt(`/Gea_^W1nd1
%qKI%,b$Y1n\%hqrJ,$(JJ+n`5qW#?h&+..2m6CTZY<W!#5QBjBpCHc6s7E4=q"'"7bFedSs8;IqrpX"hnBZU\5C`\+VgnWbJ,5Kr
%rQCi5fB8d?rPN"Ar6PE6:Oi33[t"DGs7CdITc]gIr:,htq]Gk:+9(R*!soT-5Q~>
%AI9_PrivateDataEnd
